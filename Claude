Coaching App Transformation Analysis
Based on your GitHub repository (coaching-app-bolt) and the provided documents, I can see you're working on consolidating multiple implementations of a fitness and bodybuilding coaching application. Let me address each of your primary objectives with specific recommendations.
1. Architecture Analysis & Recommendations
Current Architecture Assessment
Your current architecture appears to be React-based, and the enhancement plan mentions a "Modular React + Node.js architecture with REST API." The suggested database is PostgreSQL with normalized tables for various coaching domains including clients, workouts, nutrition, supplements, and health metrics.
Recommended Architecture
I recommend implementing a clean architecture pattern with the following layers:

Presentation Layer

React frontend with component-based architecture
Responsive UI using TailwindCSS
Custom hook patterns for data fetching and state management


Application Layer

Node.js backend with Express
RESTful API endpoints with versioning
Authentication using JWT
Request validation middleware


Domain Layer

Business logic encapsulation
Service abstractions for each coaching domain
Domain events for cross-cutting concerns


Data Layer

Repository pattern for data access
PostgreSQL database with normalized schema
Query optimization for performance
Data migration strategy



State Management Approach
For state management, your enhancement plan mentions using either Context API or Redux. I recommend a hybrid approach:

Global State: Redux for application-wide state (user authentication, theme settings)
Local State: React Context for domain-specific state (workout data, nutrition plans)
Server State: React Query for API data fetching, caching, and synchronization
Form State: Formik or React Hook Form for complex form handling

2. Feature Enhancement Roadmap
Based on your objectives, which include consolidating repositories, ensuring Excel alignment, improving UI/UX, expanding databases, implementing advanced analysis tools, and integrating scientific research, I recommend a phased approach to feature implementation:
Phase 1: Core Platform (1-2 months)

User authentication and role management
Client profile management
Basic training program builder
Simple nutrition tracking
Weekly check-in system
Basic dashboard with key metrics

Phase 2: Extended Databases (2-3 months)

Comprehensive exercise library with categorization
Food database with complete nutritional profiles
Supplement database with basic information
Training templates for different goals
Meal plan templates
Enhanced progress visualization

Phase 3: Advanced Features (3-4 months)

PED management system with protocols
Health monitoring with bloodwork tracking
Advanced training methodologies
Nutrition protocol automation
Scientific knowledge base integration
Progress prediction algorithms

Phase 4: Intelligence Layer (4-6 months)

Machine learning models for progress prediction
Advanced correlation analysis
Recommendation engine
Fatigue management algorithms
Metabolic adaptation tracking
Scientific research updates integration

3. Database Schema & Mock Data
Based on your requirements, I recommend the following database schema:
Core Entities

Users: Authentication and profile information
Clients: Client profiles and relationship to coaches
CheckIns: Weekly client data collection
Metrics: Historical tracking of all numerical data

Training Domain

Exercises: Comprehensive exercise library with metadata
TrainingPrograms: Template and custom programs
WorkoutSessions: Executed workout tracking
ProgressionSchemes: Progressive overload methodologies

Nutrition Domain

Foods: Comprehensive food database with macros/micros
Meals: Collections of foods with timing
NutritionPlans: Structured eating protocols
DietPhases: Different nutritional approaches

Supplementation Domain

Supplements: General health supplements
PEDs: Performance enhancement compounds
Protocols: Structured usage guidelines
SupplementLogs: Tracking of usage

Health Domain

BloodworkPanels: Lab test groupings
BloodworkResults: Historical lab results
HealthMetrics: Vital signs and subjective measures
SideEffects: Tracking of unwanted effects

4. UI/UX Design Recommendations
The enhancement plan mentions a "Responsive UI with TailwindCSS, accessibility features, and structured dashboards." I recommend the following UI/UX improvements:
Design System

Color Palette: Professional, high-contrast palette with primary, secondary, and accent colors
Typography: Hierarchical typography system with readable fonts
Component Library: Custom component library built on top of a base like Chakra UI or MUI
Iconography: Consistent icon set for all coaching domains

Dashboard Structure

Coach Dashboard: Client overview, pending actions, recent updates
Client Dashboard: Progress visualization, current plan, upcoming sessions
Check-In Flow: Guided, step-by-step data collection process
Analysis Views: Detailed trend analysis with filtering capabilities

Key UI Components

Progress Charts: Interactive visualization components
Program Builder: Drag-and-drop interface for program creation
Nutrition Calculator: Interactive macro and meal planning tool
Protocol Designer: Guided wizard for creating protocols
Research Explorer: Searchable scientific knowledge base

5. Scientific Integration Framework
Your requirements emphasize "deeply integrate scientific research into all recommendations" and "provide citations and evidence ratings for all protocols." I recommend implementing:
Citation System

Evidence-based rating system (A, B, C, D) for all protocols
In-app citations linked to research database
Hover tooltips showing study abstracts and key findings

Knowledge Base Structure

Categorized research topics (training, nutrition, supplementation)
Study summaries with practical applications
Expert interpretation of complex research
Regular updates based on new publications

Research Update Process

Quarterly literature reviews for each domain
Notification system for coaches about new evidence
Version control for protocols with evidence changes
Educational content explaining research implications

6. Code Implementation Approach
Here are some specific implementation recommendations:
Critical Component Examples

Client Dashboard Component

jsx// ClientDashboard.jsx
import React from 'react';
import { useClient } from '../hooks/useClient';
import ProgressChart from '../components/charts/ProgressChart';
import MetricsOverview from '../components/metrics/MetricsOverview';
import CurrentPlan from '../components/plans/CurrentPlan';
import CheckInReminder from '../components/checkins/CheckInReminder';

const ClientDashboard = ({ clientId }) => {
  const { client, metrics, plans, isLoading, error } = useClient(clientId);
  
  if (isLoading) return <LoadingSpinner />;
  if (error) return <ErrorAlert message={error.message} />;
  
  return (
    <div className="grid grid-cols-12 gap-4">
      <div className="col-span-12 lg:col-span-8">
        <ProgressChart 
          metrics={metrics} 
          timeRange="3m" 
          primaryMetric="weight"
        />
        <CurrentPlan plan={plans.current} />
      </div>
      <div className="col-span-12 lg:col-span-4">
        <MetricsOverview metrics={metrics.latest} />
        <CheckInReminder nextCheckIn={client.nextCheckInDate} />
      </div>
    </div>
  );
};

export default ClientDashboard;

Exercise Library Implementation

jsx// ExerciseLibrary.jsx
import React, { useState } from 'react';
import { useExercises } from '../hooks/useExercises';
import ExerciseCard from './ExerciseCard';
import FilterPanel from './FilterPanel';
import Pagination from './Pagination';
import { categorizeExercises, filterExercises } from '../utils/exerciseUtils';

const ExerciseLibrary = () => {
  const { exercises, isLoading } = useExercises();
  const [filters, setFilters] = useState({
    muscleGroup: [],
    equipment: [],
    difficulty: [],
    searchTerm: ''
  });
  const [page, setPage] = useState(1);
  const pageSize = 20;
  
  const filteredExercises = filterExercises(exercises, filters);
  const categorizedExercises = categorizeExercises(filteredExercises);
  const paginatedExercises = getPaginatedExercises(
    filteredExercises, 
    page, 
    pageSize
  );
  
  return (
    <div className="flex flex-col lg:flex-row gap-6">
      <FilterPanel 
        filters={filters} 
        onFilterChange={setFilters} 
        counts={getCounts(filteredExercises)}
      />
      <div className="flex-1">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {paginatedExercises.map(exercise => (
            <ExerciseCard 
              key={exercise.id} 
              exercise={exercise} 
              showAddButton 
            />
          ))}
        </div>
        <Pagination 
          total={filteredExercises.length} 
          pageSize={pageSize}
          currentPage={page}
          onPageChange={setPage}
        />
      </div>
    </div>
  );
};

export default ExerciseLibrary;

Data Visualization Example

jsx// ProgressionChart.jsx
import React from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { formatDate, calculateTrendline } from '../utils/chartUtils';
import { useTheme } from '../hooks/useTheme';

const ProgressionChart = ({ 
  data, 
  metrics = ['weight'], 
  startDate,
  endDate,
  showTrendline = true,
  height = 400
}) => {
  const { colors } = useTheme();
  const filteredData = filterDataByDateRange(data, startDate, endDate);
  const trendlineData = showTrendline ? 
    calculateTrendline(filteredData, metrics[0]) : 
    null;
  
  return (
    <div className="bg-white rounded-lg shadow p-4">
      <h3 className="text-lg font-medium mb-4">Progress Over Time</h3>
      <ResponsiveContainer width="100%" height={height}>
        <LineChart data={filteredData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis 
            dataKey="date" 
            tickFormatter={date => formatDate(date, 'short')} 
          />
          <YAxis />
          <Tooltip 
            formatter={(value, name) => [value, metricLabels[name]]}
            labelFormatter={date => formatDate(date, 'full')}
          />
          <Legend />
          {metrics.map((metric, index) => (
            <Line 
              key={metric}
              type="monotone"
              dataKey={metric}
              stroke={colors.chartLines[index % colors.chartLines.length]}
              activeDot={{ r: 8 }}
            />
          ))}
          {showTrendline && (
            <Line 
              type="linear"
              dataKey="trendline"
              stroke={colors.trendline}
              strokeDasharray="5 5"
              dot={false}
              activeDot={false}
            />
          )}
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
};

export default ProgressionChart;
Next Steps and Implementation Plan

Audit Existing Repositories

Review all codebases to identify best implementations
Document current data structures and APIs
Create inventory of existing features and components


Create Unified Architecture

Set up monorepo structure with frontend and backend
Implement core architectural patterns
Establish CI/CD pipeline for continuous deployment


Develop Core Features

Focus on basic client management and tracking
Implement authentication and authorization
Build fundamental data visualization components


Expand Databases

Develop comprehensive seed data for all domains
Implement database seeding and migration scripts
Create admin interfaces for data management


Build Advanced Features

Implement domain-specific intelligent features
Create scientific knowledge base integration
Develop advanced analysis tools



This transformation project is ambitious but achievable with proper planning and phased implementation. The key will be maintaining scientific rigor while creating an intuitive user experience for both coaches and clients.


___________________________

Project Structure Overview

# Coaching App Project Structure

```
coaching-app/
├── public/
│   ├── index.html
│   └── assets/
│       ├── images/
│       └── icons/
├── src/
│   ├── assets/                  # Static resources
│   ├── components/              # Reusable UI components
│   │   ├── common/              # Generic components
│   │   ├── dashboard/           # Dashboard specific components
│   │   ├── clients/             # Client management components
│   │   ├── training/            # Training program components
│   │   ├── nutrition/           # Nutrition tracking components
│   │   ├── supplements/         # Supplement tracking components
│   │   ├── health/              # Health monitoring components
│   │   └── research/            # Scientific research components
│   ├── context/                 # React context providers
│   ├── hooks/                   # Custom React hooks
│   ├── layouts/                 # Page layout components
│   ├── pages/                   # Page components
│   │   ├── auth/                # Authentication pages
│   │   ├── dashboard/           # Dashboard pages
│   │   ├── clients/             # Client management pages
│   │   ├── training/            # Training program pages
│   │   ├── nutrition/           # Nutrition tracking pages
│   │   ├── supplements/         # Supplement tracking pages
│   │   ├── health/              # Health monitoring pages
│   │   └── research/            # Scientific research pages
│   ├── services/                # API service functions
│   │   ├── api.js               # Base API configuration
│   │   ├── auth.service.js      # Authentication services
│   │   ├── client.service.js    # Client management services
│   │   └── ...                  # Domain-specific services
│   ├── store/                   # Redux store (if using Redux)
│   │   ├── actions/             # Redux actions
│   │   ├── reducers/            # Redux reducers
│   │   ├── selectors/           # Redux selectors
│   │   └── index.js             # Store configuration
│   ├── types/                   # TypeScript type definitions
│   ├── utils/                   # Utility functions
│   │   ├── formatting.js        # Data formatting utilities
│   │   ├── calculations.js      # Calculation utilities
│   │   ├── validation.js        # Form validation utilities
│   │   └── ...                  # Other utility functions
│   ├── App.jsx                  # Main application component
│   ├── index.jsx                # Application entry point
│   └── routes.jsx               # Application routing
├── .eslintrc.js                 # ESLint configuration
├── .prettierrc                  # Prettier configuration
├── package.json                 # Project dependencies and scripts
├── tailwind.config.js           # Tailwind CSS configuration
└── vite.config.js               # Vite configuration
```


__________

Project Setup and Installation

# Setup the project with Vite and React

# Create the project
npm create vite@latest coaching-app -- --template react

# Navigate to project directory
cd coaching-app

# Install core dependencies
npm install react-router-dom axios tailwindcss postcss autoprefixer
npm install @tanstack/react-query
npm install formik yup
npm install recharts
npm install @headlessui/react
npm install dayjs

# Install dev dependencies
npm install -D prettier eslint eslint-plugin-react

# Initialize Tailwind CSS
npx tailwindcss init -p

# Create essential directories
mkdir -p src/components/common
mkdir -p src/components/dashboard
mkdir -p src/components/clients
mkdir -p src/components/training
mkdir -p src/components/nutrition
mkdir -p src/components/supplements
mkdir -p src/components/health
mkdir -p src/components/research
mkdir -p src/context
mkdir -p src/hooks
mkdir -p src/layouts
mkdir -p src/pages/auth
mkdir -p src/pages/dashboard
mkdir -p src/pages/clients
mkdir -p src/pages/training
mkdir -p src/pages/nutrition
mkdir -p src/pages/supplements
mkdir -p src/pages/health
mkdir -p src/pages/research
mkdir -p src/services
mkdir -p src/store/actions
mkdir -p src/store/reducers
mkdir -p src/store/selectors
mkdir -p src/types
mkdir -p src/utils

_______

Tailwind Configuration

// tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#ebf5ff',
          100: '#e1effe',
          200: '#c3ddfd',
          300: '#a4cafe',
          400: '#76a9fa',
          500: '#3f83f8',
          600: '#1c64f2',
          700: '#1a56db',
          800: '#1e429f',
          900: '#233876',
          950: '#172554',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
          950: '#020617',
        },
        accent: {
          50: '#f0fdfa',
          100: '#ccfbf1',
          200: '#99f6e4',
          300: '#5eead4',
          400: '#2dd4bf',
          500: '#14b8a6',
          600: '#0d9488',
          700: '#0f766e',
          800: '#115e59',
          900: '#134e4a',
          950: '#042f2e',
        },
        success: {
          50: '#f0fdf4',
          100: '#dcfce7',
          200: '#bbf7d0',
          300: '#86efac',
          400: '#4ade80',
          500: '#22c55e',
          600: '#16a34a',
          700: '#15803d',
          800: '#166534',
          900: '#14532d',
          950: '#052e16',
        },
        warning: {
          50: '#fffbeb',
          100: '#fef3c7',
          200: '#fde68a',
          300: '#fcd34d',
          400: '#fbbf24',
          500: '#f59e0b',
          600: '#d97706',
          700: '#b45309',
          800: '#92400e',
          900: '#78350f',
          950: '#451a03',
        },
        danger: {
          50: '#fef2f2',
          100: '#fee2e2',
          200: '#fecaca',
          300: '#fca5a5',
          400: '#f87171',
          500: '#ef4444',
          600: '#dc2626',
          700: '#b91c1c',
          800: '#991b1b',
          900: '#7f1d1d',
          950: '#450a0a',
        },
      },
      fontFamily: {
        sans: ['Inter var', 'sans-serif'],
        display: ['Lexend', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace'],
      },
      spacing: {
        '72': '18rem',
        '84': '21rem',
        '96': '24rem',
      },
      borderRadius: {
        '4xl': '2rem',
      },
      boxShadow: {
        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',
      },
      animation: {
        'fade-in': 'fadeIn 0.3s ease-in-out',
        'slide-in': 'slideIn 0.3s ease-in-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideIn: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
      },
    },
  },
  plugins: [],
}

__________

Main App Component and Entry Point

// src/App.jsx
import { BrowserRouter as Router } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { AuthProvider } from './context/AuthContext';
import { ThemeProvider } from './context/ThemeContext';
import AppRoutes from './routes';
import './index.css';

// Create a client for React Query
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider>
        <AuthProvider>
          <Router>
            <AppRoutes />
          </Router>
        </AuthProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;

// src/index.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

// src/index.css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&family=Lexend:wght@100..900&family=JetBrains+Mono:wght@100..800&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    @apply h-full bg-gray-50;
  }
  body {
    @apply h-full font-sans text-gray-900 antialiased;
  }
  #root {
    @apply h-full;
  }
  
  h1 {
    @apply text-3xl font-bold text-gray-900 sm:text-4xl;
  }
  h2 {
    @apply text-2xl font-bold text-gray-900;
  }
  h3 {
    @apply text-xl font-semibold text-gray-900;
  }
  h4 {
    @apply text-lg font-semibold text-gray-900;
  }
}

@layer components {
  .btn {
    @apply rounded-md px-3.5 py-2.5 text-sm font-semibold shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2;
  }
  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-500 focus-visible:outline-primary-600;
  }
  .btn-secondary {
    @apply bg-white text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50;
  }
  .btn-success {
    @apply bg-success-600 text-white hover:bg-success-500 focus-visible:outline-success-600;
  }
  .btn-danger {
    @apply bg-danger-600 text-white hover:bg-danger-500 focus-visible:outline-danger-600;
  }
  
  .card {
    @apply rounded-lg bg-white p-6 shadow-soft;
  }
  
  .form-input {
    @apply block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-600 sm:text-sm sm:leading-6;
  }
  
  .form-label {
    @apply block text-sm font-medium leading-6 text-gray-900;
  }
  
  .form-error {
    @apply mt-2 text-sm text-danger-600;
  }
}

__________

Application Routes

// src/routes.jsx
import { Routes, Route, Navigate } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';

// Layouts
import MainLayout from './layouts/MainLayout';
import AuthLayout from './layouts/AuthLayout';

// Auth Pages
import Login from './pages/auth/Login';
import Register from './pages/auth/Register';
import ForgotPassword from './pages/auth/ForgotPassword';
import ResetPassword from './pages/auth/ResetPassword';

// Dashboard Pages
import Dashboard from './pages/dashboard/Dashboard';
import CoachDashboard from './pages/dashboard/CoachDashboard';
import ClientDashboard from './pages/dashboard/ClientDashboard';

// Client Management Pages
import ClientsList from './pages/clients/ClientsList';
import ClientDetail from './pages/clients/ClientDetail';
import ClientForm from './pages/clients/ClientForm';
import CheckIn from './pages/clients/CheckIn';
import CheckInHistory from './pages/clients/CheckInHistory';

// Training Program Pages
import ProgramsList from './pages/training/ProgramsList';
import ProgramDetail from './pages/training/ProgramDetail';
import ProgramBuilder from './pages/training/ProgramBuilder';
import ExerciseLibrary from './pages/training/ExerciseLibrary';
import WorkoutSession from './pages/training/WorkoutSession';

// Nutrition Pages
import NutritionPlans from './pages/nutrition/NutritionPlans';
import NutritionPlanDetail from './pages/nutrition/NutritionPlanDetail';
import NutritionPlanBuilder from './pages/nutrition/NutritionPlanBuilder';
import FoodLibrary from './pages/nutrition/FoodLibrary';
import MealTracker from './pages/nutrition/MealTracker';

// Supplement Pages
import SupplementList from './pages/supplements/SupplementList';
import SupplementDetail from './pages/supplements/SupplementDetail';
import SupplementProtocols from './pages/supplements/SupplementProtocols';
import PEDLibrary from './pages/supplements/PEDLibrary';

// Health Monitoring Pages
import HealthDashboard from './pages/health/HealthDashboard';
import BloodworkTracker from './pages/health/BloodworkTracker';
import VitalSigns from './pages/health/VitalSigns';
import SideEffectTracker from './pages/health/SideEffectTracker';

// Scientific Research Pages
import ResearchLibrary from './pages/research/ResearchLibrary';
import StudyDetail from './pages/research/StudyDetail';
import KnowledgeBase from './pages/research/KnowledgeBase';

// Misc Pages
import NotFound from './pages/NotFound';
import Settings from './pages/Settings';
import Profile from './pages/Profile';

// Protected Route component
const ProtectedRoute = ({ children }) => {
  const { user, isLoading } = useAuth();
  
  if (isLoading) {
    return <div className="flex h-screen items-center justify-center">Loading...</div>;
  }
  
  if (!user) {
    return <Navigate to="/auth/login" />;
  }
  
  return children;
};

// Coach Only Route component
const CoachRoute = ({ children }) => {
  const { user, isLoading } = useAuth();
  
  if (isLoading) {
    return <div className="flex h-screen items-center justify-center">Loading...</div>;
  }
  
  if (!user || user.role !== 'coach') {
    return <Navigate to="/dashboard" />;
  }
  
  return children;
};

const AppRoutes = () => {
  const { user } = useAuth();
  
  return (
    <Routes>
      {/* Auth Routes */}
      <Route path="/auth" element={<AuthLayout />}>
        <Route path="login" element={<Login />} />
        <Route path="register" element={<Register />} />
        <Route path="forgot-password" element={<ForgotPassword />} />
        <Route path="reset-password" element={<ResetPassword />} />
      </Route>
      
      {/* Protected Routes */}
      <Route path="/" element={
        <ProtectedRoute>
          <MainLayout />
        </ProtectedRoute>
      }>
        {/* Dashboard */}
        <Route index element={
          user?.role === 'coach' ? <CoachDashboard /> : <ClientDashboard />
        } />
        <Route path="dashboard" element={<Dashboard />} />
        
        {/* Client Management - Coach Only */}
        <Route path="clients" element={
          <CoachRoute>
            <ClientsList />
          </CoachRoute>
        } />
        <Route path="clients/new" element={
          <CoachRoute>
            <ClientForm />
          </CoachRoute>
        } />
        <Route path="clients/:clientId" element={
          <CoachRoute>
            <ClientDetail />
          </CoachRoute>
        } />
        <Route path="clients/:clientId/edit" element={
          <CoachRoute>
            <ClientForm />
          </CoachRoute>
        } />
        
        {/* Check-ins - Both Roles */}
        <Route path="check-in" element={<CheckIn />} />
        <Route path="check-in/history" element={<CheckInHistory />} />
        
        {/* Training Programs */}
        <Route path="training" element={<ProgramsList />} />
        <Route path="training/programs/:programId" element={<ProgramDetail />} />
        <Route path="training/builder" element={
          <CoachRoute>
            <ProgramBuilder />
          </CoachRoute>
        } />
        <Route path="training/exercises" element={<ExerciseLibrary />} />
        <Route path="training/workout/:sessionId" element={<WorkoutSession />} />
        
        {/* Nutrition */}
        <Route path="nutrition" element={<NutritionPlans />} />
        <Route path="nutrition/plans/:planId" element={<NutritionPlanDetail />} />
        <Route path="nutrition/builder" element={
          <CoachRoute>
            <NutritionPlanBuilder />
          </CoachRoute>
        } />
        <Route path="nutrition/foods" element={<FoodLibrary />} />
        <Route path="nutrition/tracker" element={<MealTracker />} />
        
        {/* Supplements */}
        <Route path="supplements" element={<SupplementList />} />
        <Route path="supplements/:supplementId" element={<SupplementDetail />} />
        <Route path="supplements/protocols" element={<SupplementProtocols />} />
        <Route path="supplements/ped-library" element={<PEDLibrary />} />
        
        {/* Health Monitoring */}
        <Route path="health" element={<HealthDashboard />} />
        <Route path="health/bloodwork" element={<BloodworkTracker />} />
        <Route path="health/vitals" element={<VitalSigns />} />
        <Route path="health/side-effects" element={<SideEffectTracker />} />
        
        {/* Research */}
        <Route path="research" element={<ResearchLibrary />} />
        <Route path="research/:studyId" element={<StudyDetail />} />
        <Route path="research/knowledge-base" element={<KnowledgeBase />} />
        
        {/* Account */}
        <Route path="settings" element={<Settings />} />
        <Route path="profile" element={<Profile />} />
      </Route>
      
      {/* 404 - Not Found */}
      <Route path="*" element={<NotFound />} />
    </Routes>
  );
};

export default AppRoutes;

__________


Authentication Context

// src/context/AuthContext.jsx
import React, { createContext, useState, useEffect } from 'react';
import authService from '../services/auth.service';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Check if user is logged in on initial load
    const checkAuthStatus = async () => {
      setIsLoading(true);
      try {
        const userData = await authService.getCurrentUser();
        setUser(userData);
        setError(null);
      } catch (err) {
        setUser(null);
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    };

    checkAuthStatus();
  }, []);

  const login = async (email, password) => {
    setIsLoading(true);
    setError(null);
    try {
      const userData = await authService.login(email, password);
      setUser(userData);
      return userData;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (userData) => {
    setIsLoading(true);
    setError(null);
    try {
      const newUser = await authService.register(userData);
      setUser(newUser);
      return newUser;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async () => {
    setIsLoading(true);
    try {
      await authService.logout();
      setUser(null);
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const forgotPassword = async (email) => {
    setIsLoading(true);
    setError(null);
    try {
      await authService.forgotPassword(email);
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const resetPassword = async (token, newPassword) => {
    setIsLoading(true);
    setError(null);
    try {
      await authService.resetPassword(token, newPassword);
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const updateProfile = async (userData) => {
    setIsLoading(true);
    setError(null);
    try {
      const updatedUser = await authService.updateProfile(userData);
      setUser(updatedUser);
      return updatedUser;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        error,
        login,
        register,
        logout,
        forgotPassword,
        resetPassword,
        updateProfile,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

// src/hooks/useAuth.js
import { useContext } from 'react';
import { AuthContext } from '../context/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// src/services/auth.service.js
import axios from 'axios';
import { API_URL } from '../config';

// Configure axios
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add token to requests if available
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Handle token refresh
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    // If error is 401 and we haven't tried to refresh token yet
    if (error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        // Try to refresh the token
        const refreshToken = localStorage.getItem('refreshToken');
        if (!refreshToken) {
          throw new Error('No refresh token available');
        }
        
        const { data } = await axios.post(`${API_URL}/auth/refresh-token`, {
          refreshToken,
        });
        
        // Save new tokens
        localStorage.setItem('token', data.token);
        localStorage.setItem('refreshToken', data.refreshToken);
        
        // Retry the original request with new token
        originalRequest.headers.Authorization = `Bearer ${data.token}`;
        return api(originalRequest);
      } catch (refreshError) {
        // If refresh fails, logout user
        localStorage.removeItem('token');
        localStorage.removeItem('refreshToken');
        window.location.href = '/auth/login';
        return Promise.reject(refreshError);
      }
    }
    
    return Promise.reject(error);
  }
);

const authService = {
  // Register new user
  async register(userData) {
    const { data } = await api.post('/auth/register', userData);
    localStorage.setItem('token', data.token);
    localStorage.setItem('refreshToken', data.refreshToken);
    return data.user;
  },
  
  // Login user
  async login(email, password) {
    const { data } = await api.post('/auth/login', { email, password });
    localStorage.setItem('token', data.token);
    localStorage.setItem('refreshToken', data.refreshToken);
    return data.user;
  },
  
  // Logout user
  async logout() {
    try {
      await api.post('/auth/logout');
    } finally {
      localStorage.removeItem('token');
      localStorage.removeItem('refreshToken');
    }
  },
  
  // Get current user info
  async getCurrentUser() {
    if (!localStorage.getItem('token')) {
      return null;
    }
    try {
      const { data } = await api.get('/auth/me');
      return data.user;
    } catch (error) {
      this.logout();
      throw error;
    }
  },
  
  // Forgot password
  async forgotPassword(email) {
    await api.post('/auth/forgot-password', { email });
  },
  
  // Reset password
  async resetPassword(token, newPassword) {
    await api.post('/auth/reset-password', { token, newPassword });
  },
  
  // Update user profile
  async updateProfile(userData) {
    const { data } = await api.put('/auth/profile', userData);
    return data.user;
  },
};

export default authService;

_________

Application Layouts

// src/layouts/MainLayout.jsx
import { useState } from 'react';
import { Outlet } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import Sidebar from '../components/common/Sidebar';
import Navbar from '../components/common/Navbar';
import MobileMenu from '../components/common/MobileMenu';

const MainLayout = () => {
  const { user } = useAuth();
  const [sidebarOpen, setSidebarOpen] = useState(false);

  return (
    <div className="flex h-full">
      {/* Sidebar for desktop */}
      <Sidebar
        className="hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col"
        user={user}
      />
      
      {/* Mobile menu */}
      <MobileMenu
        open={sidebarOpen}
        setOpen={setSidebarOpen}
        user={user}
      />
      
      {/* Content area */}
      <div className="flex flex-1 flex-col lg:pl-72">
        <Navbar onMenuClick={() => setSidebarOpen(true)} user={user} />
        
        <main className="flex-1 p-4 md:p-8">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default MainLayout;

// src/layouts/AuthLayout.jsx
import { Outlet } from 'react-router-dom';
import { Link } from 'react-router-dom';

const AuthLayout = () => {
  return (
    <div className="flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <Link to="/">
          <img
            className="mx-auto h-16 w-auto"
            src="/assets/images/logo.svg"
            alt="Coaching App Logo"
          />
        </Link>
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          Fitness Coaching Platform
        </h2>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-4 py-8 shadow sm:rounded-lg sm:px-10">
          <Outlet />
        </div>
      </div>
    </div>
  );
};

export default AuthLayout;

________

Common UI Components

// src/components/common/Sidebar.jsx
import { NavLink } from 'react-router-dom';
import { 
  HomeIcon, 
  UsersIcon, 
  ClipboardDocumentCheckIcon, 
  AcademicCapIcon,
  BeakerIcon,
  HeartIcon,
  Cog6ToothIcon,
  ArrowLeftOnRectangleIcon,
} from '@heroicons/react/24/outline';
import { useAuth } from '../../hooks/useAuth';

// Navigation items based on user role
const getNavigation = (role) => {
  const commonItems = [
    { name: 'Dashboard', href: '/dashboard', icon: HomeIcon },
    { name: 'Training', href: '/training', icon: ClipboardDocumentCheckIcon },
    { name: 'Nutrition', href: '/nutrition', icon: AcademicCapIcon },
    { name: 'Supplements', href: '/supplements', icon: BeakerIcon },
    { name: 'Health', href: '/health', icon: HeartIcon },
    { name: 'Research', href: '/research', icon: AcademicCapIcon },
  ];

  if (role === 'coach') {
    // Add coach-specific items
    return [
      ...commonItems,
      { name: 'Clients', href: '/clients', icon: UsersIcon },
    ];
  }

  return commonItems;
};

const Sidebar = ({ className = '' }) => {
  const { user, logout } = useAuth();
  const navigation = getNavigation(user?.role);

  return (
    <div className={`${className} border-r border-gray-200 bg-white`}>
      <div className="flex h-full flex-col">
        <div className="flex flex-shrink-0 items-center px-6 py-4">
          <img
            className="h-8 w-auto"
            src="/assets/images/logo.svg"
            alt="Coaching App"
          />
          <span className="ml-2 text-xl font-semibold text-gray-900">CoachPro</span>
        </div>
        
        {/* Navigation */}
        <nav className="flex-1 space-y-1 px-2 py-4">
          {navigation.map((item) => (
            <NavLink
              key={item.name}
              to={item.href}
              className={({ isActive }) =>
                `group flex items-center rounded-md px-2 py-2 text-sm font-medium ${
                  isActive
                    ? 'bg-primary-50 text-primary-600'
                    : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
                }`
              }
            >
              <item.icon
                className="mr-3 h-5 w-5 flex-shrink-0"
                aria-hidden="true"
              />
              {item.name}
            </NavLink>
          ))}
        </nav>
        
        {/* User menu */}
        <div className="border-t border-gray-200 p-4">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <div className="flex h-8 w-8 items-center justify-center rounded-full bg-primary-100 text-sm font-medium text-primary-700">
                {user?.name?.charAt(0) || 'U'}
              </div>
            </div>
            <div className="ml-3 min-w-0 flex-1">
              <div className="truncate text-sm font-medium text-gray-900">
                {user?.name || 'User'}
              </div>
              <div className="truncate text-xs text-gray-500">
                {user?.email || 'user@example.com'}
              </div>
            </div>
          </div>
          
          <div className="mt-3 space-y-1">
            <NavLink
              to="/profile"
              className="block rounded-md px-2 py-1 text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900"
            >
              Your Profile
            </NavLink>
            <NavLink
              to="/settings"
              className="block rounded-md px-2 py-1 text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900"
            >
              <div className="flex items-center">
                <Cog6ToothIcon className="mr-2 h-4 w-4" />
                Settings
              </div>
            </NavLink>
            <button
              type="button"
              onClick={logout}
              className="block w-full rounded-md px-2 py-1 text-left text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900"
            >
              <div className="flex items-center">
                <ArrowLeftOnRectangleIcon className="mr-2 h-4 w-4" />
                Sign out
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Sidebar;

// src/components/common/Navbar.jsx
import { Fragment } from 'react';
import { Link } from 'react-router-dom';
import { Menu, Transition } from '@headlessui/react';
import { Bars3Icon, BellIcon } from '@heroicons/react/24/outline';
import { useAuth } from '../../hooks/useAuth';

const Navbar = ({ onMenuClick }) => {
  const { user, logout } = useAuth();

  return (
    <header className="sticky top-0 z-10 bg-white shadow">
      <div className="flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
        <div className="flex items-center">
          <button
            type="button"
            className="rounded-md bg-white p-2 text-gray-400 lg:hidden"
            onClick={onMenuClick}
          >
            <span className="sr-only">Open sidebar</span>
            <Bars3Icon className="h-6 w-6" aria-hidden="true" />
          </button>
          <div className="ml-4 flex items-center lg:ml-0">
            <Link to="/dashboard" className="text-xl font-semibold text-gray-900 lg:hidden">
              CoachPro
            </Link>
          </div>
        </div>

        <div className="flex items-center gap-4">
          {/* Notifications */}
          <button
            type="button"
            className="rounded-full bg-white p-1 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
          >
            <span className="sr-only">View notifications</span>
            <BellIcon className="h-6 w-6" aria-hidden="true" />
          </button>

          {/* Profile dropdown */}
          <Menu as="div" className="relative ml-3">
            <div>
              <Menu.Button className="flex max-w-xs items-center rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2">
                <span className="sr-only">Open user menu</span>
                <div className="flex h-8 w-8 items-center justify-center rounded-full bg-primary-100 text-sm font-medium text-primary-700">
                  {user?.name?.charAt(0) || 'U'}
                </div>
              </Menu.Button>
            </div>
            <Transition
              as={Fragment}
              enter="transition ease-out duration-100"
              enterFrom="transform opacity-0 scale-95"
              enterTo="transform opacity-100 scale-100"
              leave="transition ease-in duration-75"
              leaveFrom="transform opacity-100 scale-100"
              leaveTo="transform opacity-0 scale-95"
            >
              <Menu.Items className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                <Menu.Item>
                  {({ active }) => (
                    <Link
                      to="/profile"
                      className={`block px-4 py-2 text-sm text-gray-700 ${
                        active ? 'bg-gray-100' : ''
                      }`}
                    >
                      Your Profile
                    </Link>
                  )}
                </Menu.Item>
                <Menu.Item>
                  {({ active }) => (
                    <Link
                      to="/settings"
                      className={`block px-4 py-2 text-sm text-gray-700 ${
                        active ? 'bg-gray-100' : ''
                      }`}
                    >
                      Settings
                    </Link>
                  )}
                </Menu.Item>
                <Menu.Item>
                  {({ active }) => (
                    <button
                      type="button"
                      onClick={logout}
                      className={`block w-full px-4 py-2 text-left text-sm text-gray-700 ${
                        active ? 'bg-gray-100' : ''
                      }`}
                    >
                      Sign out
                    </button>
                  )}
                </Menu.Item>
              </Menu.Items>
            </Transition>
          </Menu>
        </div>
      </div>
    </header>
  );
};

export default Navbar;

// src/components/common/MobileMenu.jsx
import { Fragment } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon } from '@heroicons/react/24/outline';
import Sidebar from './Sidebar';

const MobileMenu = ({ open, setOpen, user }) => {
  return (
    <Transition.Root show={open} as={Fragment}>
      <Dialog as="div" className="relative z-50 lg:hidden" onClose={setOpen}>
        <Transition.Child
          as={Fragment}
          enter="transition-opacity ease-linear duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="transition-opacity ease-linear duration-300"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-gray-900/80" />
        </Transition.Child>

        <div className="fixed inset-0 flex">
          <Transition.Child
            as={Fragment}
            enter="transition ease-in-out duration-300 transform"
            enterFrom="-translate-x-full"
            enterTo="translate-x-0"
            leave="transition ease-in-out duration-300 transform"
            leaveFrom="translate-x-0"
            leaveTo="-translate-x-full"
          >
            <Dialog.Panel className="relative mr-16 flex w-full max-w-xs flex-1">
              <Transition.Child
                as={Fragment}
                enter="ease-in-out duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="ease-in-out duration-300"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <div className="absolute left-full top-0 flex w-16 justify-center pt-5">
                  <button
                    type="button"
                    className="-m-2.5 p-2.5"
                    onClick={() => setOpen(false)}
                  >
                    <span className="sr-only">Close sidebar</span>
                    <XMarkIcon className="h-6 w-6 text-white" aria-hidden="true" />
                  </button>
                </div>
              </Transition.Child>
              
              <Sidebar className="flex w-full flex-col" user={user} />
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition.Root>
  );
};

export default MobileMenu;

// src/components/common/Button.jsx
import React from 'react';

const VARIANTS = {
  primary: 'bg-primary-600 text-white hover:bg-primary-500 focus:ring-primary-500',
  secondary: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-primary-500',
  success: 'bg-success-600 text-white hover:bg-success-500 focus:ring-success-500',
  danger: 'bg-danger-600 text-white hover:bg-danger-500 focus:ring-danger-500',
  warning: 'bg-warning-500 text-white hover:bg-warning-400 focus:ring-warning-500',
};

const SIZES = {
  xs: 'px-2.5 py-1.5 text-xs',
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-2 text-sm',
  lg: 'px-4 py-2 text-base',
  xl: 'px-6 py-3 text-base',
};

const Button = ({
  variant = 'primary',
  size = 'md',
  className = '',
  disabled = false,
  type = 'button',
  fullWidth = false,
  children,
  ...props
}) => {
  return (
    <button
      type={type}
      disabled={disabled}
      className={`
        ${VARIANTS[variant]}
        ${SIZES[size]}
        ${fullWidth ? 'w-full' : ''}
        inline-flex items-center justify-center rounded-md font-medium shadow-sm
        focus:outline-none focus:ring-2 focus:ring-offset-2
        disabled:cursor-not-allowed disabled:opacity-50
        ${className}
      `}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;

// src/components/common/Card.jsx
import React from 'react';

const Card = ({ 
  children, 
  title, 
  className = '', 
  headerActions, 
  footer,
  noPadding = false,
}) => {
  return (
    <div className={`bg-white rounded-lg shadow-soft overflow-hidden ${className}`}>
      {title && (
        <div className="px-4 py-5 sm:px-6 border-b border-gray-200 flex justify-between items-center">
          <h3 className="text-lg font-medium leading-6 text-gray-900">{title}</h3>
          {headerActions && <div>{headerActions}</div>}
        </div>
      )}
      
      <div className={noPadding ? '' : 'px-4 py-5 sm:p-6'}>
        {children}
      </div>
      
      {footer && (
        <div className="px-4 py-4 sm:px-6 bg-gray-50 border-t border-gray-200">
          {footer}
        </div>
      )}
    </div>
  );
};

export default Card;

// src/components/common/FormField.jsx
import React from 'react';

const FormField = ({
  label,
  name,
  type = 'text',
  placeholder = '',
  value,
  onChange,
  onBlur,
  error,
  touched,
  required = false,
  disabled = false,
  className = '',
  helperText,
  ...props
}) => {
  const showError = touched && error;
  
  return (
    <div className={`mb-4 ${className}`}>
      <label 
        htmlFor={name} 
        className="block text-sm font-medium text-gray-700 mb-1"
      >
        {label} {required && <span className="text-danger-500">*</span>}
      </label>
      
      {type === 'textarea' ? (
        <textarea
          id={name}
          name={name}
          value={value}
          onChange={onChange}
          onBlur={onBlur}
          disabled={disabled}
          placeholder={placeholder}
          className={`
            mt-1 block w-full rounded-md shadow-sm
            ${showError
              ? 'border-danger-300 text-danger-900 placeholder-danger-300 focus:border-danger-500 focus:ring-danger-500'
              : 'border-gray-300 focus:border-primary-500 focus:ring-primary-500'
            }
            ${disabled ? 'bg-gray-100 text-gray-500' : ''}
          `}
          {...props}
        />
      ) : type === 'select' ? (
        <select
          id={name}
          name={name}
          value={value}
          onChange={onChange}
          onBlur={onBlur}
          disabled={disabled}
          className={`
            mt-1 block w-full rounded-md shadow-sm
            ${showError
              ? 'border-danger-300 text-danger-900 focus:border-danger-500 focus:ring-danger-500'
              : 'border-gray-300 focus:border-primary-500 focus:ring-primary-500'
            }
            ${disabled ? 'bg-gray-100 text-gray-500' : ''}
          `}
          {...props}
        />
      ) : (
        <input
          type={type}
          id={name}
          name={name}
          value={value}
          onChange={onChange}
          onBlur={onBlur}
          disabled={disabled}
          placeholder={placeholder}
          className={`
            mt-1 block w-full rounded-md shadow-sm
            ${showError
              ? 'border-danger-300 text-danger-900 placeholder-danger-300 focus:border-danger-500 focus:ring-danger-500'
              : 'border-gray-300 focus:border-primary-500 focus:ring-primary-500'
            }
            ${disabled ? 'bg-gray-100 text-gray-500' : ''}
          `}
          {...props}
        />
      )}
      
      {helperText && !showError && (
        <p className="mt-1 text-sm text-gray-500">{helperText}</p>
      )}
      
      {showError && (
        <p className="mt-1 text-sm text-danger-600">{error}</p>
      )}
    </div>
  );
};

export default FormField;

__________

Authentication Pages

// src/pages/auth/Login.jsx
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import FormField from '../../components/common/FormField';
import Button from '../../components/common/Button';
import { useAuth } from '../../hooks/useAuth';

const LoginSchema = Yup.object().shape({
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .required('Password is required'),
});

const Login = () => {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [error, setError] = useState(null);

  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      setError(null);
      await login(values.email, values.password);
      navigate('/dashboard');
    } catch (err) {
      setError(err.message || 'Failed to login. Please check your credentials.');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <>
      <h1 className="text-2xl font-bold text-center mb-6">Sign in to your account</h1>
      
      {error && (
        <div className="mb-4 rounded-md bg-danger-50 p-4 text-sm text-danger-700">
          {error}
        </div>
      )}
      
      <Formik
        initialValues={{ email: '', password: '' }}
        validationSchema={LoginSchema}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, handleChange, handleBlur, isSubmitting }) => (
          <Form className="space-y-6">
            <FormField
              label="Email address"
              name="email"
              type="email"
              required
              value={values.email}
              onChange={handleChange}
              onBlur={handleBlur}
              error={errors.email}
              touched={touched.email}
            />
            
            <div>
              <FormField
                label="Password"
                name="password"
                type="password"
                required
                value={values.password}
                onChange={handleChange}
                onBlur={handleBlur}
                error={errors.password}
                touched={touched.password}
              />
              
              <div className="mt-2 flex items-center justify-end">
                <Link
                  to="/auth/forgot-password"
                  className="text-sm font-medium text-primary-600 hover:text-primary-500"
                >
                  Forgot your password?
                </Link>
              </div>
            </div>
            
            <div>
              <Button
                type="submit"
                variant="primary"
                fullWidth
                disabled={isSubmitting}
              >
                {isSubmitting ? 'Signing in...' : 'Sign in'}
              </Button>
            </div>
          </Form>
        )}
      </Formik>
      
      <div className="mt-6">
        <p className="text-center text-sm text-gray-500">
          Don't have an account?{' '}
          <Link
            to="/auth/register"
            className="font-medium text-primary-600 hover:text-primary-500"
          >
            Register now
          </Link>
        </p>
      </div>
    </>
  );
};

export default Login;

// src/pages/auth/Register.jsx
import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import FormField from '../../components/common/FormField';
import Button from '../../components/common/Button';
import { useAuth } from '../../hooks/useAuth';

const RegisterSchema = Yup.object().shape({
  name: Yup.string()
    .required('Name is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .required('Password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('password'), null], 'Passwords must match')
    .required('Confirm password is required'),
  role: Yup.string()
    .oneOf(['coach', 'client'], 'Invalid role')
    .required('Role is required'),
});

const Register = () => {
  const { register } = useAuth();
  const navigate = useNavigate();
  const [error, setError] = useState(null);

  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      setError(null);
      // Remove confirmPassword before sending to API
      const { confirmPassword, ...userData } = values;
      await register(userData);
      navigate('/dashboard');
    } catch (err) {
      setError(err.message || 'Failed to register. Please try again.');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <>
      <h1 className="text-2xl font-bold text-center mb-6">Create an account</h1>
      
      {error && (
        <div className="mb-4 rounded-md bg-danger-50 p-4 text-sm text-danger-700">
          {error}
        </div>
      )}
      
      <Formik
        initialValues={{
          name: '',
          email: '',
          password: '',
          confirmPassword: '',
          role: 'client',
        }}
        validationSchema={RegisterSchema}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, handleChange, handleBlur, isSubmitting }) => (
          <Form className="space-y-6">
            <FormField
              label="Full name"
              name="name"
              type="text"
              required
              value={values.name}
              onChange={handleChange}
              onBlur={handleBlur}
              error={errors.name}
              touched={touched.name}
            />
            
            <FormField
              label="Email address"
              name="email"
              type="email"
              required
              value={values.email}
              onChange={handleChange}
              onBlur={handleBlur}
              error={errors.email}
              touched={touched.email}
            />
            
            <FormField
              label="Password"
              name="password"
              type="password"
              required
              value={values.password}
              onChange={handleChange}
              onBlur={handleBlur}
              error={errors.password}
              touched={touched.password}
              helperText="Password must be at least 8 characters"
            />
            
            <FormField
              label="Confirm password"
              name="confirmPassword"
              type="password"
              required
              value={values.confirmPassword}
              onChange={handleChange}
              onBlur={handleBlur}
              error={errors.confirmPassword}
              touched={touched.confirmPassword}
            />
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                I am a:
              </label>
              <div className="flex space-x-4">
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    name="role"
                    value="client"
                    checked={values.role === 'client'}
                    onChange={handleChange}
                    className="h-4 w-4 border-gray-300 text-primary-600 focus:ring-primary-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">Client</span>
                </label>
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    name="role"
                    value="coach"
                    checked={values.role === 'coach'}
                    onChange={handleChange}
                    className="h-4 w-4 border-gray-300 text-primary-600 focus:ring-primary-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">Coach</span>
                </label>
              </div>
              {touched.role && errors.role && (
                <p className="mt-1 text-sm text-danger-600">{errors.role}</p>
              )}
            </div>
            
            <div>
              <Button
                type="submit"
                variant="primary"
                fullWidth
                disabled={isSubmitting}
              >
                {isSubmitting ? 'Creating account...' : 'Create account'}
              </Button>
            </div>
          </Form>
        )}
      </Formik>
      
      <div className="mt-6">
        <p className="text-center text-sm text-gray-500">
          Already have an account?{' '}
          <Link
            to="/auth/login"
            className="font-medium text-primary-600 hover:text-primary-500"
          >
            Sign in
          </Link>
        </p>
      </div>
    </>
  );
};

export default Register;

// src/pages/auth/ForgotPassword.jsx
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import FormField from '../../components/common/FormField';
import Button from '../../components/common/Button';
import { useAuth } from '../../hooks/useAuth';

const ForgotPasswordSchema = Yup.object().shape({
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
});

const ForgotPassword = () => {
  const { forgotPassword } = useAuth();
  const [submitted, setSubmitted] = useState(false);
  const [error, setError] = useState(null);

  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      setError(null);
      await forgotPassword(values.email);
      setSubmitted(true);
    } catch (err) {
      setError(err.message || 'Failed to process your request. Please try again.');
    } finally {
      setSubmitting(false);
    }
  };

  if (submitted) {
    return (
      <div className="text-center">
        <h1 className="text-2xl font-bold mb-6">Check your email</h1>
        <p className="text-gray-700 mb-6">
          We've sent password reset instructions to your email address.
          Please check your inbox and follow the link to reset your password.
        </p>
        <Link
          to="/auth/login"
          className="font-medium text-primary-600 hover:text-primary-500"
        >
          Back to sign in
        </Link>
      </div>
    );
  }

  return (
    <>
      <h1 className="text-2xl font-bold text-center mb-6">Forgot your password?</h1>
      <p className="text-gray-700 mb-6">
        Enter your email address and we'll send you instructions to reset your password.
      </p>
      
      {error && (
        <div className="mb-4 rounded-md bg-danger-50 p-4 text-sm text-danger-700">
          {error}
        </div>
      )}
      
      <Formik
        initialValues={{ email: '' }}
        validationSchema={ForgotPasswordSchema}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, handleChange, handleBlur, isSubmitting }) => (
          <Form className="space-y-6">
            <FormField
              label="Email address"
              name="email"
              type="email"
              required
              value={values.email}
              onChange={handleChange}
              onBlur={handleBlur}
              error={errors.email}
              touched={touched.email}
            />
            
            <div>
              <Button
                type="submit"
                variant="primary"
                fullWidth
                disabled={isSubmitting}
              >
                {isSubmitting ? 'Sending...' : 'Send reset instructions'}
              </Button>
            </div>
          </Form>
        )}
      </Formik>
      
      <div className="mt-6">
        <p className="text-center text-sm text-gray-500">
          <Link
            to="/auth/login"
            className="font-medium text-primary-600 hover:text-primary-500"
          >
            Back to sign in
          </Link>
        </p>
      </div>
    </>
  );
};

export default ForgotPassword;

// src/pages/auth/ResetPassword.jsx
import { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import FormField from '../../components/common/FormField';
import Button from '../../components/common/Button';
import { useAuth } from '../../hooks/useAuth';

const ResetPasswordSchema = Yup.object().shape({
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .required('Password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('password'), null], 'Passwords must match')
    .required('Confirm password is required'),
});

const ResetPassword = () => {
  const { resetPassword } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [error, setError] = useState(null);
  
  // Get token from URL query parameters
  const queryParams = new URLSearchParams(location.search);
  const token = queryParams.get('token');
  
  const handleSubmit = async (values, { setSubmitting }) => {
    try {
      setError(null);
      if (!token) {
        throw new Error('Reset token is missing. Please use the link from the email.');
      }
      await resetPassword(token, values.password);
      navigate('/auth/login', { 
        state: { message: 'Your password has been reset successfully. You can now log in with your new password.' } 
      });
    } catch (err) {
      setError(err.message || 'Failed to reset password. Please try again.');
    } finally {
      setSubmitting(false);
    }
  };

  if (!token) {
    return (
      <div className="text-center">
        <h1 className="text-2xl font-bold mb-6">Invalid or Missing Token</h1>
        <p className="text-gray-700 mb-6">
          The password reset link is invalid or expired. Please request a new password reset.
        </p>
        <Link
          to="/auth/forgot-password"
          className="font-medium text-primary-600 hover:text-primary-500"
        >
          Request new reset link
        </Link>
      </div>
    );
  }

  return (
    <>
      <h1 className="text-2xl font-bold text-center mb-6">Reset your password</h1>
      
      {error && (
        <div className="mb-4 rounded-md bg-danger-50 p-4 text-sm text-danger-700">
          {error}
        </div>
      )}
      
      <Formik
        initialValues={{ password: '', confirmPassword: '' }}
        validationSchema={ResetPasswordSchema}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, handleChange, handleBlur, isSubmitting }) => (
          <Form className="space-y-6">
            <FormField
              label="New password"
              name="password"
              type="password"
              required
              value={values.password}
              onChange={handleChange}
              onBlur={handleBlur}
              error={errors.password}
              touched={touched.password}
              helperText="Password must be at least 8 characters"
            />
            
            <FormField
              label="Confirm new password"
              name="confirmPassword"
              type="password"
              required
              value={values.confirmPassword}
              onChange={handleChange}
              onBlur={handleBlur}
              error={errors.confirmPassword}
              touched={touched.confirmPassword}
            />
            
            <div>
              <Button
                type="submit"
                variant="primary"
                fullWidth
                disabled={isSubmitting}
              >
                {isSubmitting ? 'Resetting...' : 'Reset password'}
              </Button>
            </div>
          </Form>
        )}
      </Formik>
    </>
  );
};

export default ResetPassword;

__________

Dashboard Components

// src/pages/dashboard/Dashboard.jsx
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import CoachDashboard from './CoachDashboard';
import ClientDashboard from './ClientDashboard';

const Dashboard = () => {
  const { user, isLoading } = useAuth();
  const navigate = useNavigate();
  
  useEffect(() => {
    if (!isLoading && !user) {
      navigate('/auth/login');
    }
  }, [user, isLoading, navigate]);
  
  if (isLoading) {
    return (
      <div className="flex h-full items-center justify-center">
        <p>Loading...</p>
      </div>
    );
  }

  return user?.role === 'coach' ? <CoachDashboard /> : <ClientDashboard />;
};

export default Dashboard;

// src/pages/dashboard/CoachDashboard.jsx
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { PlusIcon, UserIcon, ChartBarIcon, DocumentTextIcon } from '@heroicons/react/24/outline';
import Card from '../../components/common/Card';
import Button from '../../components/common/Button';
import ClientSummary from '../../components/dashboard/ClientSummary';
import StatsOverview from '../../components/dashboard/StatsOverview';
import RecentActivities from '../../components/dashboard/RecentActivities';
import ActionItems from '../../components/dashboard/ActionItems';
import clientService from '../../services/client.service';

const CoachDashboard = () => {
  const [clients, setClients] = useState([]);
  const [stats, setStats] = useState({});
  const [actionItems, setActionItems] = useState([]);
  const [activities, setActivities] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    const fetchDashboardData = async () => {
      setIsLoading(true);
      try {
        // Fetch all required data
        const [clientsData, statsData, actionItemsData, activitiesData] = await Promise.all([
          clientService.getClients(),
          clientService.getCoachStats(),
          clientService.getActionItems(),
          clientService.getRecentActivities()
        ]);
        
        setClients(clientsData);
        setStats(statsData);
        setActionItems(actionItemsData);
        setActivities(activitiesData);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchDashboardData();
  }, []);
  
  if (isLoading) {
    return (
      <div className="flex h-full items-center justify-center">
        <p>Loading dashboard data...</p>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">Coach Dashboard</h1>
        <Link to="/clients/new">
          <Button variant="primary" className="flex items-center">
            <PlusIcon className="mr-1 h-5 w-5" />
            Add Client
          </Button>
        </Link>
      </div>
      
      <StatsOverview stats={stats} />
      
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
        {/* Action Items */}
        <div className="lg:col-span-1">
          <Card title="Action Items">
            <ActionItems items={actionItems} />
          </Card>
        </div>
        
        {/* Recent Activity */}
        <div className="lg:col-span-2">
          <Card title="Recent Activity">
            <RecentActivities activities={activities} />
          </Card>
        </div>
      </div>
      
      <div>
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-900">Your Clients</h2>
          <Link to="/clients" className="text-sm text-primary-600 hover:text-primary-500">
            View all
          </Link>
        </div>
        
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {clients.slice(0, 8).map((client) => (
            <ClientSummary key={client.id} client={client} />
          ))}
          
          {clients.length === 0 && (
            <div className="col-span-full py-8 text-center">
              <UserIcon className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-semibold text-gray-900">No clients yet</h3>
              <p className="mt-1 text-sm text-gray-500">Get started by adding your first client.</p>
              <div className="mt-6">
                <Link to="/clients/new">
                  <Button variant="primary">Add Client</Button>
                </Link>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CoachDashboard;

// src/pages/dashboard/ClientDashboard.jsx
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { ClipboardDocumentCheckIcon, CalculatorIcon, BeakerIcon } from '@heroicons/react/24/outline';
import Card from '../../components/common/Card';
import Button from '../../components/common/Button';
import ProgressChart from '../../components/dashboard/ProgressChart';
import NextWorkout from '../../components/dashboard/NextWorkout';
import NutritionSummary from '../../components/dashboard/NutritionSummary';
import SupplementPlan from '../../components/dashboard/SupplementPlan';
import CheckInReminder from '../../components/dashboard/CheckInReminder';
import clientService from '../../services/client.service';

const ClientDashboard = () => {
  const [clientData, setClientData] = useState(null);
  const [nextWorkout, setNextWorkout] = useState(null);
  const [nutritionPlan, setNutritionPlan] = useState(null);
  const [supplementPlan, setSupplementPlan] = useState(null);
  const [nextCheckIn, setNextCheckIn] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    const fetchClientData = async () => {
      setIsLoading(true);
      try {
        // Fetch all required data
        const [clientDataRes, nextWorkoutRes, nutritionRes, supplementsRes, checkInRes] = await Promise.all([
          clientService.getClientData(),
          clientService.getNextWorkout(),
          clientService.getCurrentNutritionPlan(),
          clientService.getCurrentSupplementPlan(),
          clientService.getNextCheckIn()
        ]);
        
        setClientData(clientDataRes);
        setNextWorkout(nextWorkoutRes);
        setNutritionPlan(nutritionRes);
        setSupplementPlan(supplementsRes);
        setNextCheckIn(checkInRes);
      } catch (error) {
        console.error('Error fetching client dashboard data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchClientData();
  }, []);
  
  if (isLoading) {
    return (
      <div className="flex h-full items-center justify-center">
        <p>Loading dashboard data...</p>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">Welcome, {clientData?.name || 'Client'}</h1>
        <Link to="/check-in">
          <Button variant="primary">Complete Check-In</Button>
        </Link>
      </div>
      
      {/* Progress Charts */}
      <Card title="Your Progress">
        <ProgressChart data={clientData?.metrics || []} />
      </Card>
      
      {/* Check-in Reminder (if needed) */}
      {nextCheckIn && new Date(nextCheckIn.date) <= new Date(Date.now() + 2 * 24 * 60 * 60 * 1000) && (
        <CheckInReminder checkIn={nextCheckIn} />
      )}
      
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
        {/* Next Workout */}
        <Card title="Next Workout" headerActions={
          <Link to={`/training/workout/${nextWorkout?.id}`} className="text-sm text-primary-600 hover:text-primary-500">
            Start Workout
          </Link>
        }>
          {nextWorkout ? (
            <NextWorkout workout={nextWorkout} />
          ) : (
            <div className="py-6 text-center">
              <ClipboardDocumentCheckIcon className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-semibold text-gray-900">No upcoming workouts</h3>
              <p className="mt-1 text-sm text-gray-500">Your coach hasn't assigned your next workout yet.</p>
            </div>
          )}
        </Card>
        
        {/* Nutrition Plan */}
        <Card title="Today's Nutrition" headerActions={
          <Link to="/nutrition/tracker" className="text-sm text-primary-600 hover:text-primary-500">
            Track Meals
          </Link>
        }>
          {nutritionPlan ? (
            <NutritionSummary plan={nutritionPlan} />
          ) : (
            <div className="py-6 text-center">
              <CalculatorIcon className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-semibold text-gray-900">No nutrition plan</h3>
              <p className="mt-1 text-sm text-gray-500">Your coach hasn't assigned a nutrition plan yet.</p>
            </div>
          )}
        </Card>
      </div>
      
      {/* Supplement Plan */}
      <Card title="Supplement Plan" headerActions={
        <Link to="/supplements" className="text-sm text-primary-600 hover:text-primary-500">
          View All
        </Link>
      }>
        {supplementPlan ? (
          <SupplementPlan plan={supplementPlan} />
        ) : (
          <div className="py-6 text-center">
            <BeakerIcon className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-sm font-semibold text-gray-900">No supplement plan</h3>
            <p className="mt-1 text-sm text-gray-500">Your coach hasn't assigned any supplements yet.</p>
          </div>
        )}
      </Card>
    </div>
  );
};

export default ClientDashboard;


_________

Dashboard Components Core

// src/components/dashboard/StatsOverview.jsx
import { UsersIcon, CheckIcon, ArrowTrendingUpIcon, BanknotesIcon } from '@heroicons/react/24/outline';
import Card from '../common/Card';

const StatsOverview = ({ stats = {} }) => {
  const {
    totalClients = 0,
    activeClients = 0,
    checkInsCompleted = 0,
    checkInsPending = 0,
    averageProgress = 0,
    totalRevenue = 0,
  } = stats;

  const statItems = [
    {
      name: 'Total Clients',
      value: totalClients,
      icon: UsersIcon,
      color: 'bg-primary-100 text-primary-700',
    },
    {
      name: 'Active Clients',
      value: activeClients,
      icon: UsersIcon,
      color: 'bg-success-100 text-success-700',
    },
    {
      name: 'Check-ins Completed',
      value: checkInsCompleted,
      icon: CheckIcon,
      color: 'bg-accent-100 text-accent-700',
    },
    {
      name: 'Check-ins Pending',
      value: checkInsPending,
      icon: CheckIcon,
      color: 'bg-warning-100 text-warning-700',
    },
    {
      name: 'Average Progress',
      value: `${averageProgress}%`,
      icon: ArrowTrendingUpIcon,
      color: 'bg-primary-100 text-primary-700',
    },
    {
      name: 'Total Revenue',
      value: `$${totalRevenue.toLocaleString()}`,
      icon: BanknotesIcon,
      color: 'bg-success-100 text-success-700',
    },
  ];

  return (
    <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6">
      {statItems.map((stat) => (
        <Card key={stat.name} className="text-center">
          <div className="flex flex-col items-center">
            <div className={`rounded-full p-3 ${stat.color}`}>
              <stat.icon className="h-6 w-6" />
            </div>
            <h3 className="mt-2 text-xl font-bold text-gray-900">{stat.value}</h3>
            <p className="text-sm text-gray-500">{stat.name}</p>
          </div>
        </Card>
      ))}
    </div>
  );
};

export default StatsOverview;

// src/components/dashboard/ActionItems.jsx
import { CheckIcon, XMarkIcon } from '@heroicons/react/24/outline';
import Button from '../common/Button';

const ActionItems = ({ items = [] }) => {
  if (items.length === 0) {
    return (
      <div className="text-center py-4">
        <p className="text-gray-500">No action items pending</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {items.map((item) => (
        <div
          key={item.id}
          className="border-l-4 rounded-md bg-white p-4 shadow-sm"
          style={{ borderColor: getPriorityColor(item.priority) }}
        >
          <div className="flex justify-between">
            <h3 className="text-sm font-medium text-gray-900">{item.title}</h3>
            <span
              className={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${getPriorityClass(
                item.priority
              )}`}
            >
              {item.priority}
            </span>
          </div>
          <p className="mt-1 text-sm text-gray-600">{item.description}</p>
          <p className="mt-1 text-xs text-gray-500">
            {item.client && (
              <span className="font-medium">Client: {item.client}</span>
            )}
            {item.dueDate && (
              <span className="ml-2">Due: {formatDate(item.dueDate)}</span>
            )}
          </p>
          <div className="mt-3 flex">
            <Button
              variant="success"
              size="xs"
              className="mr-2 flex items-center"
              onClick={() => console.log('Complete action', item.id)}
            >
              <CheckIcon className="mr-1 h-3 w-3" />
              Complete
            </Button>
            <Button
              variant="secondary"
              size="xs"
              className="flex items-center"
              onClick={() => console.log('Dismiss action', item.id)}
            >
              <XMarkIcon className="mr-1 h-3 w-3" />
              Dismiss
            </Button>
          </div>
        </div>
      ))}
    </div>
  );
};

// Helper functions
const getPriorityColor = (priority) => {
  switch (priority.toLowerCase()) {
    case 'high':
      return '#ef4444';
    case 'medium':
      return '#f59e0b';
    default:
      return '#22c55e';
  }
};

const getPriorityClass = (priority) => {
  switch (priority.toLowerCase()) {
    case 'high':
      return 'bg-danger-100 text-danger-800';
    case 'medium':
      return 'bg-warning-100 text-warning-800';
    default:
      return 'bg-success-100 text-success-800';
  }
};

const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(undefined, {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
};

export default ActionItems;

// src/components/dashboard/RecentActivities.jsx
import { CalendarIcon, ClockIcon } from '@heroicons/react/24/outline';
import { Link } from 'react-router-dom';

const RecentActivities = ({ activities = [] }) => {
  if (activities.length === 0) {
    return (
      <div className="text-center py-4">
        <p className="text-gray-500">No recent activities</p>
      </div>
    );
  }

  return (
    <div>
      <ul className="space-y-4">
        {activities.map((activity) => (
          <li
            key={activity.id}
            className="relative flex items-start space-x-3 px-2 py-3 hover:bg-gray-50 rounded-md"
          >
            <div
              className={`flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full ${getActivityIconClass(
                activity.type
              )}`}
            >
              {getActivityIcon(activity.type)}
            </div>
            <div className="min-w-0 flex-1">
              <div className="text-sm font-medium text-gray-900">
                <Link
                  to={activity.link}
                  className="hover:underline focus:outline-none"
                >
                  {activity.title}
                </Link>
              </div>
              <p className="text-sm text-gray-500">{activity.description}</p>
              <div className="mt-1 flex items-center space-x-2 text-xs text-gray-400">
                <span className="flex items-center">
                  <CalendarIcon className="mr-1 h-3 w-3" />
                  {formatDate(activity.date)}
                </span>
                <span className="flex items-center">
                  <ClockIcon className="mr-1 h-3 w-3" />
                  {formatTime(activity.date)}
                </span>
                {activity.client && (
                  <span className="flex items-center">
                    Client: {activity.client}
                  </span>
                )}
              </div>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

// Helper functions
const getActivityIconClass = (type) => {
  switch (type.toLowerCase()) {
    case 'check-in':
      return 'bg-primary-100 text-primary-700';
    case 'workout':
      return 'bg-accent-100 text-accent-700';
    case 'nutrition':
      return 'bg-success-100 text-success-700';
    case 'client':
      return 'bg-warning-100 text-warning-700';
    default:
      return 'bg-secondary-100 text-secondary-700';
  }
};

const getActivityIcon = (type) => {
  // This is a placeholder - import specific icons for each type
  return <span className="text-lg">{type.charAt(0).toUpperCase()}</span>;
};

const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(undefined, {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
};

const formatTime = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleTimeString(undefined, {
    hour: '2-digit',
    minute: '2-digit',
  });
};

export default RecentActivities;

// src/components/dashboard/ClientSummary.jsx
import { Link } from 'react-router-dom';
import { ArrowTrendingUpIcon, ArrowTrendingDownIcon } from '@heroicons/react/24/solid';

const ClientSummary = ({ client }) => {
  const {
    id,
    name,
    profileImage,
    lastCheckIn,
    nextCheckIn,
    progress,
    complianceRate,
  } = client;

  // Determine progress indicator
  const getProgressIndicator = () => {
    if (progress > 0) {
      return (
        <span className="inline-flex items-center text-success-600">
          <ArrowTrendingUpIcon className="mr-1 h-4 w-4" />
          +{progress}%
        </span>
      );
    } else if (progress < 0) {
      return (
        <span className="inline-flex items-center text-danger-600">
          <ArrowTrendingDownIcon className="mr-1 h-4 w-4" />
          {progress}%
        </span>
      );
    }
    return <span className="text-gray-500">No change</span>;
  };

  return (
    <Link
      to={`/clients/${id}`}
      className="block rounded-lg border border-gray-200 bg-white p-4 shadow-soft hover:bg-gray-50"
    >
      <div className="flex items-center">
        <div className="flex-shrink-0">
          {profileImage ? (
            <img
              src={profileImage}
              alt={name}
              className="h-12 w-12 rounded-full object-cover"
            />
          ) : (
            <div className="flex h-12 w-12 items-center justify-center rounded-full bg-primary-100 text-lg font-medium text-primary-700">
              {name.charAt(0)}
            </div>
          )}
        </div>
        <div className="ml-4 flex-1">
          <h3 className="text-lg font-medium text-gray-900">{name}</h3>
          <div className="mt-1 flex items-center space-x-2 text-sm">
            <span className="text-gray-500">Progress:</span>
            {getProgressIndicator()}
          </div>
        </div>
      </div>
      
      <div className="mt-4 grid grid-cols-2 gap-4 text-sm">
        <div>
          <p className="text-gray-500">Last Check-in</p>
          <p className="font-medium text-gray-900">
            {lastCheckIn ? formatDate(lastCheckIn) : 'None'}
          </p>
        </div>
        <div>
          <p className="text-gray-500">Next Check-in</p>
          <p className="font-medium text-gray-900">
            {nextCheckIn ? formatDate(nextCheckIn) : 'Not scheduled'}
          </p>
        </div>
        <div>
          <p className="text-gray-500">Compliance</p>
          <p className="font-medium text-gray-900">{complianceRate || 0}%</p>
        </div>
      </div>
    </Link>
  );
};

// Helper function
const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(undefined, {
    month: 'short',
    day: 'numeric',
  });
};

export default ClientSummary;

// src/components/dashboard/ProgressChart.jsx
import { useState } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import Card from '../common/Card';

const metricOptions = [
  { id: 'weight', name: 'Weight' },
  { id: 'bodyFat', name: 'Body Fat %' },
  { id: 'waist', name: 'Waist (cm)' },
  { id: 'chest', name: 'Chest (cm)' },
  { id: 'arms', name: 'Arms (cm)' },
  { id: 'legs', name: 'Legs (cm)' },
];

const timeOptions = [
  { id: '1m', name: '1 Month' },
  { id: '3m', name: '3 Months' },
  { id: '6m', name: '6 Months' },
  { id: '1y', name: 'Year' },
  { id: 'all', name: 'All Time' },
];

const ProgressChart = ({ data = [] }) => {
  const [selectedMetric, setSelectedMetric] = useState('weight');
  const [timeRange, setTimeRange] = useState('3m');
  
  // Filter data based on time range
  const filteredData = getFilteredData(data, timeRange);
  
  return (
    <div>
      <div className="mb-4 flex flex-wrap items-center justify-between gap-2">
        <div className="flex items-center space-x-2">
          <label htmlFor="metric" className="text-sm font-medium text-gray-700">
            Metric:
          </label>
          <select
            id="metric"
            value={selectedMetric}
            onChange={(e) => setSelectedMetric(e.target.value)}
            className="rounded-md border-gray-300 py-1 pl-3 pr-10 text-sm focus:border-primary-500 focus:ring-primary-500"
          >
            {metricOptions.map((option) => (
              <option key={option.id} value={option.id}>
                {option.name}
              </option>
            ))}
          </select>
        </div>
        
        <div className="flex items-center space-x-2">
          <label htmlFor="timeRange" className="text-sm font-medium text-gray-700">
            Time Range:
          </label>
          <select
            id="timeRange"
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
            className="rounded-md border-gray-300 py-1 pl-3 pr-10 text-sm focus:border-primary-500 focus:ring-primary-500"
          >
            {timeOptions.map((option) => (
              <option key={option.id} value={option.id}>
                {option.name}
              </option>
            ))}
          </select>
        </div>
      </div>
      
      <div className="h-80">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={filteredData}
            margin={{
              top: 5,
              right: 30,
              left: 20,
              bottom: 5,
            }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis 
              dataKey="date" 
              tickFormatter={(date) => formatDate(date)}
            />
            <YAxis />
            <Tooltip 
              formatter={(value) => [`${value} ${getMetricUnit(selectedMetric)}`, getMetricName(selectedMetric)]}
              labelFormatter={(label) => formatDateFull(label)}
            />
            <Legend />
            <Line
              type="monotone"
              dataKey={selectedMetric}
              stroke="#3f83f8"
              activeDot={{ r: 8 }}
              name={getMetricName(selectedMetric)}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
      
      <div className="mt-4 grid grid-cols-3 gap-4">
        <StatCard 
          title="Current" 
          value={getLatestValue(data, selectedMetric)} 
          unit={getMetricUnit(selectedMetric)}
        />
        <StatCard 
          title="Change" 
          value={getChange(data, selectedMetric)} 
          unit={getMetricUnit(selectedMetric)}
          showTrend
        />
        <StatCard 
          title="Average" 
          value={getAverage(data, selectedMetric)} 
          unit={getMetricUnit(selectedMetric)}
        />
      </div>
    </div>
  );
};

// Helper component
const StatCard = ({ title, value, unit, showTrend = false }) => {
  const valueNum = parseFloat(value);
  const isPositive = valueNum > 0;
  const isNegative = valueNum < 0;
  
  return (
    <div className="rounded-lg bg-gray-50 p-4 text-center">
      <h3 className="text-sm font-medium text-gray-500">{title}</h3>
      <div className="mt-1 flex items-center justify-center">
        {showTrend && isPositive && (
          <ArrowTrendingUpIcon className="mr-1 h-5 w-5 text-danger-600" />
        )}
        {showTrend && isNegative && (
          <ArrowTrendingDownIcon className="mr-1 h-5 w-5 text-success-600" />
        )}
        <p className={`text-xl font-bold ${showTrend && isPositive ? 'text-danger-600' : ''} ${showTrend && isNegative ? 'text-success-600' : ''}`}>
          {value} {unit}
        </p>
      </div>
    </div>
  );
};

// Helper functions
const getFilteredData = (data, timeRange) => {
  if (!data.length) return [];
  
  const now = new Date();
  let startDate;
  
  switch (timeRange) {
    case '1m':
      startDate = new Date(now.setMonth(now.getMonth() - 1));
      break;
    case '3m':
      startDate = new Date(now.setMonth(now.getMonth() - 3));
      break;
    case '6m':
      startDate = new Date(now.setMonth(now.getMonth() - 6));
      break;
    case '1y':
      startDate = new Date(now.setFullYear(now.getFullYear() - 1));
      break;
    default:
      return data;
  }
  
  return data.filter(item => new Date(item.date) >= startDate);
};

const getLatestValue = (data, metric) => {
  if (!data.length) return '0';
  const sortedData = [...data].sort((a, b) => new Date(b.date) - new Date(a.date));
  return sortedData[0][metric]?.toFixed(1) || '0';
};

const getChange = (data, metric) => {
  if (data.length < 2) return '0';
  
  const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));
  const first = sortedData[0][metric] || 0;
  const last = sortedData[sortedData.length - 1][metric] || 0;
  
  return (last - first).toFixed(1);
};

const getAverage = (data, metric) => {
  if (!data.length) return '0';
  
  const sum = data.reduce((acc, item) => acc + (item[metric] || 0), 0);
  return (sum / data.length).toFixed(1);
};

const getMetricName = (metricId) => {
  const metric = metricOptions.find(m => m.id === metricId);
  return metric ? metric.name : metricId;
};

const getMetricUnit = (metricId) => {
  switch (metricId) {
    case 'weight':
      return 'kg';
    case 'bodyFat':
      return '%';
    default:
      return 'cm';
  }
};

const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(undefined, {
    month: 'short',
    day: 'numeric',
  });
};

const formatDateFull = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(undefined, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

export default ProgressChart;

// src/components/dashboard/NextWorkout.jsx
import { ClockIcon, CalendarIcon } from '@heroicons/react/24/outline';
import { Link } from 'react-router-dom';

const NextWorkout = ({ workout }) => {
  const { id, title, scheduledDate, exercises, duration, notes } = workout;

  return (
    <div>
      <div className="mb-4 flex items-center justify-between">
        <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
        <div className="flex items-center space-x-4 text-sm text-gray-500">
          <span className="flex items-center">
            <CalendarIcon className="mr-1 h-4 w-4" />
            {formatDate(scheduledDate)}
          </span>
          <span className="flex items-center">
            <ClockIcon className="mr-1 h-4 w-4" />
            {duration} min
          </span>
        </div>
      </div>

      <div className="mb-4">
        <h4 className="mb-2 text-sm font-medium text-gray-700">Exercises</h4>
        <ul className="space-y-2">
          {exercises.slice(0, 4).map((exercise) => (
            <li key={exercise.id} className="flex items-center justify-between rounded-md bg-gray-50 p-2">
              <span className="font-medium">{exercise.name}</span>
              <span className="text-sm text-gray-500">
                {exercise.sets} × {exercise.reps} {exercise.weight ? `@ ${exercise.weight}kg` : ''}
              </span>
            </li>
          ))}
          
          {exercises.length > 4 && (
            <li className="text-center text-sm text-gray-500">
              +{exercises.length - 4} more exercises
            </li>
          )}
        </ul>
      </div>

      {notes && (
        <div className="mb-4">
          <h4 className="mb-1 text-sm font-medium text-gray-700">Notes</h4>
          <p className="text-sm text-gray-600">{notes}</p>
        </div>
      )}

      <div className="mt-4">
        <Link
          to={`/training/workout/${id}`}
          className="inline-flex w-full items-center justify-center rounded-md bg-primary-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
        >
          Start Workout
        </Link>
      </div>
    </div>
  );
};

// Helper function
const formatDate = (dateString) => {
  const date = new Date(dateString);
  const today = new Date();
  const tomorrow = new Date();
  tomorrow.setDate(today.getDate() + 1);
  
  if (date.toDateString() === today.toDateString()) {
    return 'Today';
  } else if (date.toDateString() === tomorrow.toDateString()) {
    return 'Tomorrow';
  } else {
    return date.toLocaleDateString(undefined, {
      weekday: 'long',
      month: 'short',
      day: 'numeric',
    });
  }
};

export default NextWorkout;

// src/components/dashboard/NutritionSummary.jsx
import { useState } from 'react';
import { ArrowRightIcon } from '@heroicons/react/24/outline';
import { Link } from 'react-router-dom';

const NutritionSummary = ({ plan }) => {
  const [currentMeal, setCurrentMeal] = useState(0);
  
  if (!plan || !plan.meals || plan.meals.length === 0) {
    return (
      <div className="text-center py-4">
        <p className="text-gray-500">No nutrition plan available</p>
      </div>
    );
  }
  
  const { 
    calories,
    protein,
    carbs,
    fat,
    meals,
    progress = {
      consumedCalories: 0,
      consumedProtein: 0,
      consumedCarbs: 0,
      consumedFat: 0,
      completedMeals: [],
    },
  } = plan;
  
  const meal = meals[currentMeal];
  const { consumedCalories, consumedProtein, consumedCarbs, consumedFat, completedMeals } = progress;
  
  return (
    <div>
      {/* Macro Summary */}
      <div className="mb-4 grid grid-cols-4 gap-2 text-center">
        <MacroProgress
          label="Calories"
          current={consumedCalories}
          target={calories}
          unit="kcal"
        />
        <MacroProgress
          label="Protein"
          current={consumedProtein}
          target={protein}
          unit="g"
        />
        <MacroProgress
          label="Carbs"
          current={consumedCarbs}
          target={carbs}
          unit="g"
        />
        <MacroProgress
          label="Fat"
          current={consumedFat}
          target={fat}
          unit="g"
        />
      </div>
      
      {/* Meal Navigation */}
      <div className="mb-4 flex items-center justify-between">
        <button
          onClick={() => setCurrentMeal((prev) => Math.max(0, prev - 1))}
          disabled={currentMeal === 0}
          className="rounded-md bg-gray-100 p-1 text-gray-600 disabled:opacity-50"
        >
          <ArrowRightIcon className="h-5 w-5 rotate-180" />
        </button>
        
        <h3 className="text-sm font-medium">
          Meal {currentMeal + 1} of {meals.length}: {meal.name}
        </h3>
        
        <button
          onClick={() => setCurrentMeal((prev) => Math.min(meals.length - 1, prev + 1))}
          disabled={currentMeal === meals.length - 1}
          className="rounded-md bg-gray-100 p-1 text-gray-600 disabled:opacity-50"
        >
          <ArrowRightIcon className="h-5 w-5" />
        </button>
      </div>
      
      {/* Current Meal */}
      <div className="rounded-md border border-gray-200 p-3">
        <div className="mb-2 flex items-center justify-between">
          <div>
            <h4 className="font-medium">{meal.name}</h4>
            <p className="text-xs text-gray-500">{meal.time}</p>
          </div>
          
          {completedMeals.includes(meal.id) ? (
            <span className="rounded-full bg-success-100 px-2 py-1 text-xs font-medium text-success-800">
              Completed
            </span>
          ) : (
            <span className="rounded-full bg-gray-100 px-2 py-1 text-xs font-medium text-gray-800">
              Pending
            </span>
          )}
        </div>
        
        <div className="mb-2 flex justify-between text-xs text-gray-500">
          <span>Calories: {meal.calories}kcal</span>
          <span>P: {meal.protein}g</span>
          <span>C: {meal.carbs}g</span>
          <span>F: {meal.fat}g</span>
        </div>
        
        <ul className="mb-3 space-y-1">
          {meal.foods.map((food) => (
            <li key={food.id} className="flex justify-between text-sm">
              <span>{food.name}</span>
              <span className="text-gray-500">{food.serving}</span>
            </li>
          ))}
        </ul>
        
        <Link
          to="/nutrition/tracker"
          className="inline-flex w-full items-center justify-center rounded-md bg-primary-600 px-3 py-1.5 text-xs font-medium text-white shadow-sm hover:bg-primary-500"
        >
          {completedMeals.includes(meal.id) ? 'Update Tracking' : 'Track Meal'}
        </Link>
      </div>
    </div>
  );
};

// Helper component
const MacroProgress = ({ label, current, target, unit }) => {
  const percentage = Math.min(100, Math.round((current / target) * 100)) || 0;
  
  return (
    <div>
      <p className="text-xs font-medium text-gray-500">{label}</p>
      <div className="mt-1 flex items-end justify-center">
        <span className="text-lg font-bold">{current}</span>
        <span className="text-xs text-gray-500">/{target}{unit}</span>
      </div>
      <div className="mt-1 h-1.5 w-full rounded-full bg-gray-200">
        <div
          className="h-1.5 rounded-full bg-primary-600"
          style={{ width: `${percentage}%` }}
        ></div>
      </div>
    </div>
  );
};

export default NutritionSummary;

// src/components/dashboard/SupplementPlan.jsx
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { CheckCircleIcon } from '@heroicons/react/24/solid';
import { XCircleIcon } from '@heroicons/react/24/outline';

const SupplementPlan = ({ plan }) => {
  const [currentTimeOfDay, setCurrentTimeOfDay] = useState('morning');
  
  if (!plan || !plan.supplements || Object.keys(plan.supplements).length === 0) {
    return (
      <div className="text-center py-4">
        <p className="text-gray-500">No supplement plan available</p>
      </div>
    );
  }
  
  const { supplements, completed = {} } = plan;
  const timeOfDayOptions = Object.keys(supplements);
  
  return (
    <div>
      {/* Time of Day Tab Navigation */}
      <div className="mb-4 border-b border-gray-200">
        <nav className="-mb-px flex space-x-4">
          {timeOfDayOptions.map((timeOfDay) => (
            <button
              key={timeOfDay}
              onClick={() => setCurrentTimeOfDay(timeOfDay)}
              className={`whitespace-nowrap px-3 py-2 text-sm font-medium ${
                currentTimeOfDay === timeOfDay
                  ? 'border-b-2 border-primary-600 text-primary-600'
                  : 'text-gray-500 hover:border-b-2 hover:border-gray-300 hover:text-gray-700'
              }`}
            >
              {capitalizeFirstLetter(timeOfDay)}
            </button>
          ))}
        </nav>
      </div>
      
      {/* Supplements for Selected Time */}
      <div>
        <ul className="space-y-2">
          {supplements[currentTimeOfDay].map((supplement) => {
            const isCompleted = completed[currentTimeOfDay]?.includes(supplement.id);
            
            return (
              <li
                key={supplement.id}
                className={`flex items-center justify-between rounded-md p-2 ${
                  isCompleted ? 'bg-success-50' : 'bg-gray-50'
                }`}
              >
                <div className="flex items-center">
                  {isCompleted ? (
                    <CheckCircleIcon className="mr-2 h-5 w-5 text-success-600" />
                  ) : (
                    <XCircleIcon className="mr-2 h-5 w-5 text-gray-400" />
                  )}
                  <div>
                    <h3 className="font-medium">{supplement.name}</h3>
                    <p className="text-sm text-gray-500">
                      {supplement.dosage} {supplement.unit}
                    </p>
                  </div>
                </div>
                {supplement.notes && (
                  <span className="text-xs text-gray-500">{supplement.notes}</span>
                )}
              </li>
            );
          })}
          
          {supplements[currentTimeOfDay].length === 0 && (
            <li className="text-center py-2 text-gray-500">
              No supplements for this time of day
            </li>
          )}
        </ul>
        
        <div className="mt-4">
          <Link
            to="/supplements"
            className="inline-flex w-full items-center justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50"
          >
            Mark Supplements as Taken
          </Link>
        </div>
      </div>
    </div>
  );
};

// Helper functions
const capitalizeFirstLetter = (string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

export default SupplementPlan;

// src/components/dashboard/CheckInReminder.jsx
import { Link } from 'react-router-dom';
import { ClockIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';
import Button from '../common/Button';

const CheckInReminder = ({ checkIn }) => {
  const { date, isOverdue, daysRemaining } = checkIn;
  
  // Determine styling based on status
  const getStatusStyles = () => {
    if (isOverdue) {
      return {
        containerClass: 'bg-danger-50 border-danger-500',
        iconClass: 'text-danger-600',
        textClass: 'text-danger-700',
        buttonVariant: 'danger',
      };
    } else if (daysRemaining <= 1) {
      return {
        containerClass: 'bg-warning-50 border-warning-500',
        iconClass: 'text-warning-600',
        textClass: 'text-warning-700',
        buttonVariant: 'warning',
      };
    } else {
      return {
        containerClass: 'bg-primary-50 border-primary-500',
        iconClass: 'text-primary-600',
        textClass: 'text-primary-700',
        buttonVariant: 'primary',
      };
    }
  };
  
  const { containerClass, iconClass, textClass, buttonVariant } = getStatusStyles();
  
  return (
    <div className={`rounded-lg border-l-4 p-4 ${containerClass}`}>
      <div className="flex">
        <div className="flex-shrink-0">
          {isOverdue ? (
            <ExclamationCircleIcon className={`h-5 w-5 ${iconClass}`} />
          ) : (
            <ClockIcon className={`h-5 w-5 ${iconClass}`} />
          )}
        </div>
        <div className="ml-3">
          <h3 className={`text-sm font-medium ${textClass}`}>
            {isOverdue
              ? 'Overdue Check-in'
              : daysRemaining === 0
              ? 'Check-in Due Today'
              : daysRemaining === 1
              ? 'Check-in Due Tomorrow'
              : `Check-in Due in ${daysRemaining} Days`}
          </h3>
          <div className={`mt-2 text-sm ${textClass}`}>
            <p>
              {isOverdue
                ? `Your check-in was due on ${formatDate(date)}. Please complete it as soon as possible.`
                : `Your next check-in is scheduled for ${formatDate(date)}. Make sure to submit all required information.`}
            </p>
          </div>
          <div className="mt-4">
            <Link to="/check-in">
              <Button variant={buttonVariant} size="sm">
                Complete Check-in
              </Button>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

// Helper functions
const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(undefined, {
    weekday: 'long',
    month: 'long',
    day: 'numeric',
  });
};

export default CheckInReminder;


___________


API Services


// src/config.js
// Configuration variables for the application

// API base URL - change this to your actual API endpoint
export const API_URL = process.env.NODE_ENV === 'production' 
  ? 'https://api.coaching-app.com/api/v1'
  : 'http://localhost:5000/api/v1';

// Maximum file upload size in bytes (5MB)
export const MAX_FILE_SIZE = 5 * 1024 * 1024;

// Default pagination settings
export const DEFAULT_PAGE_SIZE = 10;

// Chart colors
export const CHART_COLORS = {
  primary: '#3f83f8',
  secondary: '#64748b',
  success: '#22c55e',
  danger: '#ef4444',
  warning: '#f59e0b',
  info: '#06b6d4',
  accent: '#14b8a6',
};

// Date format options
export const DATE_FORMATS = {
  short: {
    month: 'short',
    day: 'numeric',
  },
  medium: {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  },
  long: {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  },
  time: {
    hour: '2-digit',
    minute: '2-digit',
  },
};

// src/services/api.js
import axios from 'axios';
import { API_URL } from '../config';

// Create axios instance with default config
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    
    // Handle token refresh on 401 errors
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        const refreshToken = localStorage.getItem('refreshToken');
        if (!refreshToken) {
          // No refresh token available, logout
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          window.location.href = '/auth/login';
          return Promise.reject(error);
        }
        
        // Try to get a new token
        const response = await axios.post(`${API_URL}/auth/refresh-token`, {
          refreshToken,
        });
        
        // Save new tokens
        localStorage.setItem('token', response.data.token);
        localStorage.setItem('refreshToken', response.data.refreshToken);
        
        // Update the original request with new token
        originalRequest.headers.Authorization = `Bearer ${response.data.token}`;
        
        // Retry the original request
        return api(originalRequest);
      } catch (refreshError) {
        // Refresh failed, logout user
        localStorage.removeItem('token');
        localStorage.removeItem('refreshToken');
        window.location.href = '/auth/login';
        return Promise.reject(refreshError);
      }
    }
    
    return Promise.reject(error);
  }
);

export default api;

// src/services/client.service.js
import api from './api';
import { DEFAULT_PAGE_SIZE } from '../config';

const clientService = {
  // Get all clients for a coach
  async getClients(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', sort = 'name', order = 'asc' } = params;
    
    try {
      const { data } = await api.get('/clients', {
        params: { page, limit, search, sort, order },
      });
      return data.clients;
    } catch (error) {
      console.error('Error fetching clients:', error);
      throw error;
    }
  },
  
  // Get client by ID
  async getClient(clientId) {
    try {
      const { data } = await api.get(`/clients/${clientId}`);
      return data.client;
    } catch (error) {
      console.error(`Error fetching client ${clientId}:`, error);
      throw error;
    }
  },
  
  // Create a new client
  async createClient(clientData) {
    try {
      const { data } = await api.post('/clients', clientData);
      return data.client;
    } catch (error) {
      console.error('Error creating client:', error);
      throw error;
    }
  },
  
  // Update a client
  async updateClient(clientId, clientData) {
    try {
      const { data } = await api.put(`/clients/${clientId}`, clientData);
      return data.client;
    } catch (error) {
      console.error(`Error updating client ${clientId}:`, error);
      throw error;
    }
  },
  
  // Delete a client
  async deleteClient(clientId) {
    try {
      await api.delete(`/clients/${clientId}`);
      return true;
    } catch (error) {
      console.error(`Error deleting client ${clientId}:`, error);
      throw error;
    }
  },
  
  // Get coach dashboard stats
  async getCoachStats() {
    try {
      const { data } = await api.get('/coach/stats');
      return data.stats;
    } catch (error) {
      console.error('Error fetching coach stats:', error);
      throw error;
    }
  },
  
  // Get client dashboard data
  async getClientData() {
    try {
      const { data } = await api.get('/client/dashboard');
      return data;
    } catch (error) {
      console.error('Error fetching client dashboard data:', error);
      throw error;
    }
  },
  
  // Get action items for a coach
  async getActionItems() {
    try {
      const { data } = await api.get('/coach/action-items');
      return data.items;
    } catch (error) {
      console.error('Error fetching action items:', error);
      throw error;
    }
  },
  
  // Get recent activities
  async getRecentActivities() {
    try {
      const { data } = await api.get('/activities/recent');
      return data.activities;
    } catch (error) {
      console.error('Error fetching recent activities:', error);
      throw error;
    }
  },
  
  // Get next workout for a client
  async getNextWorkout() {
    try {
      const { data } = await api.get('/workouts/next');
      return data.workout;
    } catch (error) {
      console.error('Error fetching next workout:', error);
      throw error;
    }
  },
  
  // Get current nutrition plan for a client
  async getCurrentNutritionPlan() {
    try {
      const { data } = await api.get('/nutrition/current');
      return data.plan;
    } catch (error) {
      console.error('Error fetching current nutrition plan:', error);
      throw error;
    }
  },
  
  // Get current supplement plan for a client
  async getCurrentSupplementPlan() {
    try {
      const { data } = await api.get('/supplements/current');
      return data.plan;
    } catch (error) {
      console.error('Error fetching current supplement plan:', error);
      throw error;
    }
  },
  
  // Get next check-in for a client
  async getNextCheckIn() {
    try {
      const { data } = await api.get('/check-ins/next');
      return data.checkIn;
    } catch (error) {
      console.error('Error fetching next check-in:', error);
      throw error;
    }
  },
  
  // Submit a check-in
  async submitCheckIn(checkInData) {
    try {
      const { data } = await api.post('/check-ins', checkInData);
      return data.checkIn;
    } catch (error) {
      console.error('Error submitting check-in:', error);
      throw error;
    }
  },
  
  // Get check-in history
  async getCheckInHistory(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE } = params;
    
    try {
      const { data } = await api.get('/check-ins/history', {
        params: { page, limit },
      });
      return data.checkIns;
    } catch (error) {
      console.error('Error fetching check-in history:', error);
      throw error;
    }
  },
};

export default clientService;

// src/services/training.service.js
import api from './api';
import { DEFAULT_PAGE_SIZE } from '../config';

const trainingService = {
  // Get all training programs
  async getPrograms(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', sort = 'createdAt', order = 'desc' } = params;
    
    try {
      const { data } = await api.get('/training/programs', {
        params: { page, limit, search, sort, order },
      });
      return data.programs;
    } catch (error) {
      console.error('Error fetching training programs:', error);
      throw error;
    }
  },
  
  // Get program by ID
  async getProgram(programId) {
    try {
      const { data } = await api.get(`/training/programs/${programId}`);
      return data.program;
    } catch (error) {
      console.error(`Error fetching program ${programId}:`, error);
      throw error;
    }
  },
  
  // Create a new program
  async createProgram(programData) {
    try {
      const { data } = await api.post('/training/programs', programData);
      return data.program;
    } catch (error) {
      console.error('Error creating program:', error);
      throw error;
    }
  },
  
  // Update a program
  async updateProgram(programId, programData) {
    try {
      const { data } = await api.put(`/training/programs/${programId}`, programData);
      return data.program;
    } catch (error) {
      console.error(`Error updating program ${programId}:`, error);
      throw error;
    }
  },
  
  // Delete a program
  async deleteProgram(programId) {
    try {
      await api.delete(`/training/programs/${programId}`);
      return true;
    } catch (error) {
      console.error(`Error deleting program ${programId}:`, error);
      throw error;
    }
  },
  
  // Get exercise library
  async getExercises(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', category = '', equipment = '' } = params;
    
    try {
      const { data } = await api.get('/exercises', {
        params: { page, limit, search, category, equipment },
      });
      return data.exercises;
    } catch (error) {
      console.error('Error fetching exercises:', error);
      throw error;
    }
  },
  
  // Get exercise by ID
  async getExercise(exerciseId) {
    try {
      const { data } = await api.get(`/exercises/${exerciseId}`);
      return data.exercise;
    } catch (error) {
      console.error(`Error fetching exercise ${exerciseId}:`, error);
      throw error;
    }
  },
  
  // Create a new exercise
  async createExercise(exerciseData) {
    try {
      const { data } = await api.post('/exercises', exerciseData);
      return data.exercise;
    } catch (error) {
      console.error('Error creating exercise:', error);
      throw error;
    }
  },
  
  // Get workout session by ID
  async getWorkoutSession(sessionId) {
    try {
      const { data } = await api.get(`/workouts/sessions/${sessionId}`);
      return data.session;
    } catch (error) {
      console.error(`Error fetching workout session ${sessionId}:`, error);
      throw error;
    }
  },
  
  // Log a workout session
  async logWorkoutSession(sessionData) {
    try {
      const { data } = await api.post('/workouts/sessions', sessionData);
      return data.session;
    } catch (error) {
      console.error('Error logging workout session:', error);
      throw error;
    }
  },
  
  // Get workout history
  async getWorkoutHistory(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, clientId } = params;
    
    try {
      const { data } = await api.get('/workouts/history', {
        params: { page, limit, clientId },
      });
      return data.sessions;
    } catch (error) {
      console.error('Error fetching workout history:', error);
      throw error;
    }
  },
};

export default trainingService;

// src/services/nutrition.service.js
import api from './api';
import { DEFAULT_PAGE_SIZE } from '../config';

const nutritionService = {
  // Get all nutrition plans
  async getNutritionPlans(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', sort = 'createdAt', order = 'desc' } = params;
    
    try {
      const { data } = await api.get('/nutrition/plans', {
        params: { page, limit, search, sort, order },
      });
      return data.plans;
    } catch (error) {
      console.error('Error fetching nutrition plans:', error);
      throw error;
    }
  },
  
  // Get nutrition plan by ID
  async getNutritionPlan(planId) {
    try {
      const { data } = await api.get(`/nutrition/plans/${planId}`);
      return data.plan;
    } catch (error) {
      console.error(`Error fetching nutrition plan ${planId}:`, error);
      throw error;
    }
  },
  
  // Create a new nutrition plan
  async createNutritionPlan(planData) {
    try {
      const { data } = await api.post('/nutrition/plans', planData);
      return data.plan;
    } catch (error) {
      console.error('Error creating nutrition plan:', error);
      throw error;
    }
  },
  
  // Update a nutrition plan
  async updateNutritionPlan(planId, planData) {
    try {
      const { data } = await api.put(`/nutrition/plans/${planId}`, planData);
      return data.plan;
    } catch (error) {
      console.error(`Error updating nutrition plan ${planId}:`, error);
      throw error;
    }
  },
  
  // Delete a nutrition plan
  async deleteNutritionPlan(planId) {
    try {
      await api.delete(`/nutrition/plans/${planId}`);
      return true;
    } catch (error) {
      console.error(`Error deleting nutrition plan ${planId}:`, error);
      throw error;
    }
  },
  
  // Get food database
  async getFoods(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', category = '' } = params;
    
    try {
      const { data } = await api.get('/foods', {
        params: { page, limit, search, category },
      });
      return data.foods;
    } catch (error) {
      console.error('Error fetching foods:', error);
      throw error;
    }
  },
  
  // Get food by ID
  async getFood(foodId) {
    try {
      const { data } = await api.get(`/foods/${foodId}`);
      return data.food;
    } catch (error) {
      console.error(`Error fetching food ${foodId}:`, error);
      throw error;
    }
  },
  
  // Log meal
  async logMeal(mealData) {
    try {
      const { data } = await api.post('/nutrition/meals', mealData);
      return data.meal;
    } catch (error) {
      console.error('Error logging meal:', error);
      throw error;
    }
  },
  
  // Get meal history
  async getMealHistory(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, date } = params;
    
    try {
      const { data } = await api.get('/nutrition/meals/history', {
        params: { page, limit, date },
      });
      return data.meals;
    } catch (error) {
      console.error('Error fetching meal history:', error);
      throw error;
    }
  },
};

export default nutritionService;

// src/services/supplement.service.js
import api from './api';
import { DEFAULT_PAGE_SIZE } from '../config';

const supplementService = {
  // Get all supplement protocols
  async getSupplementProtocols(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', sort = 'createdAt', order = 'desc' } = params;
    
    try {
      const { data } = await api.get('/supplements/protocols', {
        params: { page, limit, search, sort, order },
      });
      return data.protocols;
    } catch (error) {
      console.error('Error fetching supplement protocols:', error);
      throw error;
    }
  },
  
  // Get supplement protocol by ID
  async getSupplementProtocol(protocolId) {
    try {
      const { data } = await api.get(`/supplements/protocols/${protocolId}`);
      return data.protocol;
    } catch (error) {
      console.error(`Error fetching supplement protocol ${protocolId}:`, error);
      throw error;
    }
  },
  
  // Create a new supplement protocol
  async createSupplementProtocol(protocolData) {
    try {
      const { data } = await api.post('/supplements/protocols', protocolData);
      return data.protocol;
    } catch (error) {
      console.error('Error creating supplement protocol:', error);
      throw error;
    }
  },
  
  // Update a supplement protocol
  async updateSupplementProtocol(protocolId, protocolData) {
    try {
      const { data } = await api.put(`/supplements/protocols/${protocolId}`, protocolData);
      return data.protocol;
    } catch (error) {
      console.error(`Error updating supplement protocol ${protocolId}:`, error);
      throw error;
    }
  },
  
  // Delete a supplement protocol
  async deleteSupplementProtocol(protocolId) {
    try {
      await api.delete(`/supplements/protocols/${protocolId}`);
      return true;
    } catch (error) {
      console.error(`Error deleting supplement protocol ${protocolId}:`, error);
      throw error;
    }
  },
  
  // Get supplement database
  async getSupplements(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', category = '' } = params;
    
    try {
      const { data } = await api.get('/supplements', {
        params: { page, limit, search, category },
      });
      return data.supplements;
    } catch (error) {
      console.error('Error fetching supplements:', error);
      throw error;
    }
  },
  
  // Get PED database
  async getPEDs(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', category = '' } = params;
    
    try {
      const { data } = await api.get('/supplements/peds', {
        params: { page, limit, search, category },
      });
      return data.peds;
    } catch (error) {
      console.error('Error fetching PEDs:', error);
      throw error;
    }
  },
  
  // Log supplement intake
  async logSupplementIntake(intakeData) {
    try {
      const { data } = await api.post('/supplements/intake', intakeData);
      return data.intake;
    } catch (error) {
      console.error('Error logging supplement intake:', error);
      throw error;
    }
  },
  
  // Get supplement intake history
  async getSupplementIntakeHistory(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, date } = params;
    
    try {
      const { data } = await api.get('/supplements/intake/history', {
        params: { page, limit, date },
      });
      return data.intake;
    } catch (error) {
      console.error('Error fetching supplement intake history:', error);
      throw error;
    }
  },
};

export default supplementService;

// src/services/health.service.js
import api from './api';
import { DEFAULT_PAGE_SIZE } from '../config';

const healthService = {
  // Get health metrics
  async getHealthMetrics(params = {}) {
    const { clientId, startDate, endDate, metrics = [] } = params;
    
    try {
      const { data } = await api.get('/health/metrics', {
        params: { clientId, startDate, endDate, metrics: metrics.join(',') },
      });
      return data.metrics;
    } catch (error) {
      console.error('Error fetching health metrics:', error);
      throw error;
    }
  },
  
  // Record health metrics
  async recordHealthMetrics(metricsData) {
    try {
      const { data } = await api.post('/health/metrics', metricsData);
      return data.metrics;
    } catch (error) {
      console.error('Error recording health metrics:', error);
      throw error;
    }
  },
  
  // Get bloodwork history
  async getBloodworkHistory(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, clientId } = params;
    
    try {
      const { data } = await api.get('/health/bloodwork', {
        params: { page, limit, clientId },
      });
      return data.bloodwork;
    } catch (error) {
      console.error('Error fetching bloodwork history:', error);
      throw error;
    }
  },
  
  // Record bloodwork results
  async recordBloodwork(bloodworkData) {
    try {
      const { data } = await api.post('/health/bloodwork', bloodworkData);
      return data.bloodwork;
    } catch (error) {
      console.error('Error recording bloodwork:', error);
      throw error;
    }
  },
  
  // Get vital signs history
  async getVitalSignsHistory(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, clientId, startDate, endDate } = params;
    
    try {
      const { data } = await api.get('/health/vitals', {
        params: { page, limit, clientId, startDate, endDate },
      });
      return data.vitals;
    } catch (error) {
      console.error('Error fetching vital signs history:', error);
      throw error;
    }
  },
  
  // Record vital signs
  async recordVitalSigns(vitalsData) {
    try {
      const { data } = await api.post('/health/vitals', vitalsData);
      return data.vitals;
    } catch (error) {
      console.error('Error recording vital signs:', error);
      throw error;
    }
  },
  
  // Get side effects history
  async getSideEffectsHistory(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, clientId, startDate, endDate } = params;
    
    try {
      const { data } = await api.get('/health/side-effects', {
        params: { page, limit, clientId, startDate, endDate },
      });
      return data.sideEffects;
    } catch (error) {
      console.error('Error fetching side effects history:', error);
      throw error;
    }
  },
  
  // Record side effects
  async recordSideEffects(sideEffectsData) {
    try {
      const { data } = await api.post('/health/side-effects', sideEffectsData);
      return data.sideEffects;
    } catch (error) {
      console.error('Error recording side effects:', error);
      throw error;
    }
  },
};

export default healthService;

// src/services/research.service.js
import api from './api';
import { DEFAULT_PAGE_SIZE } from '../config';

const researchService = {
  // Get research library
  async getResearchLibrary(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', category = '', sort = 'date', order = 'desc' } = params;
    
    try {
      const { data } = await api.get('/research', {
        params: { page, limit, search, category, sort, order },
      });
      return data.studies;
    } catch (error) {
      console.error('Error fetching research library:', error);
      throw error;
    }
  },
  
  // Get study by ID
  async getStudy(studyId) {
    try {
      const { data } = await api.get(`/research/${studyId}`);
      return data.study;
    } catch (error) {
      console.error(`Error fetching study ${studyId}:`, error);
      throw error;
    }
  },
  
  // Get knowledge base
  async getKnowledgeBase(params = {}) {
    const { page = 1, limit = DEFAULT_PAGE_SIZE, search = '', topic = '' } = params;
    
    try {
      const { data } = await api.get('/research/knowledge-base', {
        params: { page, limit, search, topic },
      });
      return data.articles;
    } catch (error) {
      console.error('Error fetching knowledge base:', error);
      throw error;
    }
  },
  
  // Get knowledge base article by ID
  async getKnowledgeBaseArticle(articleId) {
    try {
      const { data } = await api.get(`/research/knowledge-base/${articleId}`);
      return data.article;
    } catch (error) {
      console.error(`Error fetching knowledge base article ${articleId}:`, error);
      throw error;
    }
  },
};

export default researchService;


__________

{
    id: '802',
    name: 'Nandrolone Decanoate',
    category: 'AAS',
    type: 'injectable',
    description: 'Anabolic steroid with strong tissue-building properties and lower androgenic effects compared to testosterone.',
    halfLife: '6-8 days',
    dosageRange: '200-400mg per week',
    detectionTime: '18 months',
    effects: [
      'Increased muscle mass',
      'Enhanced collagen synthesis',
      'Joint pain relief',
      'Red blood cell production'
    ],
    sideEffects: [
      'Suppression of natural testosterone production',
      'Potential cardiovascular issues',
      'Potential for progestogenic side effects',
      'Potential for androgenic side effects'
    ],
    ancillaries: [
      'Aromatase inhibitor (lower dose)',
      'Post-cycle therapy',
      'Cardiovascular support',
      'Prolactin control (if needed)'
    ],
    notes: 'Often used for joint relief and in bulking cycles. Has unique impact on collagen synthesis. Requires thorough post-cycle therapy.'
  },
  {
    id: '803',
    name: 'Anavar (Oxandrolone)',
    category: 'AAS',
    type: 'oral',
    description: 'Mild anabolic steroid with low androgenic properties, often used for cutting cycles and by female athletes.',
    halfLife: '8-10 hours',
    dosageRange: 'Men: 20-80mg daily, Women: 5-20mg daily',
    detectionTime: '3 weeks',
    effects: [
      'Moderate increases in strength',
      'Fat loss preservation of lean tissue',
      'Minimal water retention',
      'Improved vascularity'
    ],
    sideEffects: [
      'Mild suppression of natural testosterone',
      'Potential negative impact on lipid profile',
      'Potential for liver stress',
      'Virilization in women at higher doses'
    ],
    ancillaries: [
      'Liver support',
      'Post-cycle therapy (for longer cycles)',
      'Lipid support'
    ],
    notes: 'One of the milder oral steroids with lower side effect profile. Often used in cutting cycles and by beginners or women. Still requires liver support.'
  },
  {
    id: '804',
    name: 'HGH (Human Growth Hormone)',
    category: 'Peptide',
    type: 'injectable',
    description: 'Naturally occurring hormone that stimulates growth, cell reproduction and regeneration.',
    halfLife: '20-30 minutes',
    dosageRange: '2-4 IU daily for general wellness, 4-8 IU for bodybuilding',
    detectionTime: '1-2 days',
    effects: [
      'Enhanced recovery',
      'Improved skin quality',
      'Increased fat metabolism',
      'Potential for lean tissue growth (at higher doses and with AAS)'
    ],
    sideEffects: [
      'Water retention',
      'Joint pain',
      'Carpal tunnel syndrome',
      'Potential for insulin resistance',
      'Potential for organ growth at excessive doses'
    ],
    ancillaries: [
      'Blood glucose monitoring',
      'Thyroid function monitoring'
    ],
    notes: 'Long-term commitment for best results (6+ months). Benefits are subtle and cumulative. Best used with insulin monitoring.'
  },
  {
    id: '805',
    name: 'Cardarine (GW501516)',
    category: 'SARM/PPAR',
    type: 'oral',
    description: 'PPARδ receptor agonist that enhances endurance, fat loss, and metabolic efficiency.',
    halfLife: '16-24 hours',
    dosageRange: '10-20mg daily',
    detectionTime: '40 days',
    effects: [
      'Significantly improved endurance',
      'Enhanced fat burning',
      'Better nutrient partitioning',
      'Potential cholesterol benefits'
    ],
    sideEffects: [
      'Potential carcinogenicity in animal studies at high doses',
      'Limited long-term human safety data'
    ],
    ancillaries: [],
    notes: 'Not technically a SARM but often grouped with them. Research was discontinued due to cancer concerns in animal studies, though human-equivalent doses were much higher than typically used.'
  }
];

// src/mockData/bloodwork.js
export const mockBloodwork = [
  {
    id: '901',
    date: '2025-04-01T08:00:00Z',
    category: 'Complete Blood Count',
    values: [
      { name: 'Red Blood Cells', value: 5.2, unit: 'million/uL', range: '4.5-5.9', status: 'normal' },
      { name: 'Hemoglobin', value: 15.2, unit: 'g/dL', range: '13.5-17.5', status: 'normal' },
      { name: 'Hematocrit', value: 46, unit: '%', range: '41-50', status: 'normal' },
      { name: 'White Blood Cells', value: 7.2, unit: 'thousand/uL', range: '4.5-11.0', status: 'normal' },
      { name: 'Platelets', value: 250, unit: 'thousand/uL', range: '150-450', status: 'normal' }
    ]
  },
  {
    id: '902',
    date: '2025-04-01T08:00:00Z',
    category: 'Lipid Panel',
    values: [
      { name: 'Total Cholesterol', value: 210, unit: 'mg/dL', range: '<200', status: 'high' },
      { name: 'LDL Cholesterol', value: 130, unit: 'mg/dL', range: '<100', status: 'high' },
      { name: 'HDL Cholesterol', value: 45, unit: 'mg/dL', range: '>40', status: 'normal' },
      { name: 'Triglycerides', value: 175, unit: 'mg/dL', range: '<150', status: 'high' }
    ]
  },
  {
    id: '903',
    date: '2025-04-01T08:00:00Z',
    category: 'Metabolic Panel',
    values: [
      { name: 'Glucose', value: 92, unit: 'mg/dL', range: '70-99', status: 'normal' },
      { name: 'BUN', value: 18, unit: 'mg/dL', range: '7-20', status: 'normal' },
      { name: 'Creatinine', value: 1.0, unit: 'mg/dL', range: '0.6-1.2', status: 'normal' },
      { name: 'Sodium', value: 140, unit: 'mmol/L', range: '136-145', status: 'normal' },
      { name: 'Potassium', value: 4.2, unit: 'mmol/L', range: '3.5-5.1', status: 'normal' },
      { name: 'Calcium', value: 9.5, unit: 'mg/dL', range: '8.5-10.5', status: 'normal' }
    ]
  },
  {
    id: '904',
    date: '2025-04-01T08:00:00Z',
    category: 'Liver Function',
    values: [
      { name: 'ALT', value: 45, unit: 'U/L', range: '7-56', status: 'normal' },
      { name: 'AST', value: 40, unit: 'U/L', range: '5-40', status: 'borderline' },
      { name: 'ALP', value: 75, unit: 'U/L', range: '44-147', status: 'normal' },
      { name: 'Bilirubin', value: 0.8, unit: 'mg/dL', range: '0.1-1.2', status: 'normal' },
      { name: 'Albumin', value: 4.2, unit: 'g/dL', range: '3.4-5.4', status: 'normal' }
    ]
  },
  {
    id: '905',
    date: '2025-04-01T08:00:00Z',
    category: 'Hormone Panel',
    values: [
      { name: 'Total Testosterone', value: 750, unit: 'ng/dL', range: '264-916', status: 'normal' },
      { name: 'Free Testosterone', value: 15, unit: 'pg/mL', range: '8.7-25.1', status: 'normal' },
      { name: 'Estradiol', value: 28, unit: 'pg/mL', range: '10-40', status: 'normal' },
      { name: 'SHBG', value: 35, unit: 'nmol/L', range: '10-50', status: 'normal' },
      { name: 'LH', value: 4.2, unit: 'mIU/mL', range: '1.7-8.6', status: 'normal' },
      { name: 'FSH', value: 3.8, unit: 'mIU/mL', range: '1.5-12.4', status: 'normal' },
      { name: 'TSH', value: 2.1, unit: 'uIU/mL', range: '0.4-4.0', status: 'normal' },
      { name: 'T4', value: 7.2, unit: 'ug/dL', range: '4.5-12.0', status: 'normal' },
      { name: 'T3', value: 120, unit: 'ng/dL', range: '80-200', status: 'normal' }
    ]
  }
];

// src/mockData/research.js
export const mockResearch = [
  {
    id: '1001',
    title: 'The Effect of Resistance Training Frequency on Muscle Hypertrophy: A Systematic Review and Meta-Analysis',
    authors: 'Schoenfeld BJ, Grgic J, Krieger J.',
    journal: 'Sports Medicine',
    year: 2024,
    doi: '10.1007/s40279-024-12345-6',
    abstract: 'This meta-analysis examined the effect of resistance training frequency on muscle hypertrophy. Results indicated that when volume is equated, training frequency does not significantly impact hypertrophy outcomes, suggesting total weekly volume is the primary driver of muscle growth rather than how the volume is distributed throughout the week.',
    evidenceLevel: 'A',
    keyFindings: [
      'When volume is equated, training muscle groups 1, 2, or 3+ times per week produces similar hypertrophy',
      'Total weekly volume appears to be the primary driver of muscle growth',
      'Higher frequencies may allow for greater total volume accumulation',
      'Individual recovery capacity should be considered when determining optimal frequency'
    ],
    practicalApplications: 'Training frequency should be personalized based on individual recovery capacity, schedule, and preferences. As long as sufficient total weekly volume is achieved, muscle groups can be trained between 1-3+ times per week with similar hypertrophy outcomes.',
    category: 'training',
    tags: ['frequency', 'hypertrophy', 'volume', 'meta-analysis']
  },
  {
    id: '1002',
    title: 'Nutrition Periodization for Bodybuilders: Improving Body Composition During Contest Preparation Without Compromising Performance',
    authors: 'Helms ER, Aragon AA, Fitschen PJ.',
    journal: 'Journal of the International Society of Sports Nutrition',
    year: 2024,
    doi: '10.1186/s12970-024-00567-w',
    abstract: 'This review provides evidence-based recommendations for nutritional periodization strategies for bodybuilders during contest preparation. The authors suggest phase-based approaches to caloric restriction, macronutrient manipulation, and refeed implementation to maximize fat loss while preserving lean mass and performance.',
    evidenceLevel: 'B',
    keyFindings: [
      'Gradual caloric deficits of 15-25% appear optimal for preserving lean mass during fat loss phases',
      'Protein intake should remain high (1.8-2.7g/kg) throughout all phases of contest preparation',
      'Periodic refeeds and diet breaks may help mitigate metabolic adaptations during prolonged dieting',
      'Carbohydrate periodization around training may improve performance during energy restriction'
    ],
    practicalApplications: 'Bodybuilders should implement gradual, moderate caloric deficits with high protein intake and strategic refeeds during contest preparation. As competition approaches, periodizing carbohydrate intake around training sessions becomes increasingly important for performance preservation.',
    category: 'nutrition',
    tags: ['contest preparation', 'bodybuilding', 'periodization', 'macronutrients']
  },
  {
    id: '1003',
    title: 'Pharmacokinetics and Pharmacodynamics of Anabolic Androgenic Steroids and Their Impact on HPTA Function',
    authors: 'Williams DR, Thompson KL, Behringer M.',
    journal: 'Journal of Clinical Endocrinology & Metabolism',
    year: 2023,
    doi: '10.1210/jcem.2023.12345',
    abstract: 'This comprehensive review examines the pharmacokinetic profiles of various anabolic androgenic steroids (AAS) and their effects on the hypothalamic-pituitary-testicular axis (HPTA). The authors discuss recovery patterns following AAS discontinuation and evidence-based approaches to post-cycle therapy.',
    evidenceLevel: 'B',
    keyFindings: [
      'HPTA suppression varies significantly between different AAS compounds based on their pharmacokinetic profiles',
      'Recovery of endogenous testosterone production follows predictable patterns based on compound half-life and cycle duration',
      'SERMs and hCG show efficacy in accelerating HPTA recovery post-cycle',
      'Complete HPTA recovery typically requires 3-12+ months depending on cycle parameters'
    ],
    practicalApplications: 'Understanding the pharmacokinetics of specific AAS compounds is crucial for predicting HPTA suppression and planning appropriate post-cycle therapy. The evidence supports using SERMs (like clomiphene) and/or hCG for HPTA recovery, with protocol length determined by cycle duration and compounds used.',
    category: 'PEDs',
    tags: ['testosterone', 'HPTA', 'recovery', 'post-cycle therapy']
  },
  {
    id: '1004',
    title: 'The Impact of Sleep Duration and Quality on Muscle Recovery, Hypertrophy, and Performance in Resistance-Trained Athletes',
    authors: 'Martinez JA, Klein S, Patel K.',
    journal: 'Sports Medicine',
    year: 2023,
    doi: '10.1007/s40279-023-01876-3',
    abstract: 'This systematic review examined the relationship between sleep parameters and muscular adaptations in resistance-trained individuals. The authors found consistent evidence that sleep restriction negatively impacts recovery, hypertrophy, and performance outcomes, while sleep extension can enhance these parameters.',
    evidenceLevel: 'B',
    keyFindings: [
      'Sleep restriction (<6 hours) impairs post-exercise muscle protein synthesis',
      'Hormonal environments conducive to muscle growth are optimized during deep sleep phases',
      'Chronic sleep restriction correlates with increased muscle protein breakdown',
      'Sleep extension strategies (>8 hours) demonstrably improve strength performance and recovery'
    ],
    practicalApplications: 'Athletes should prioritize sleep hygiene strategies to achieve 7-9 hours of quality sleep per night. During intensive training phases or caloric restriction, sleep needs may increase, and additional attention to sleep quality becomes particularly important for optimizing muscular adaptations and recovery.',
    category: 'recovery',
    tags: ['sleep', 'recovery', 'hypertrophy', 'hormones']
  },
  {
    id: '1005',
    title: 'DEXA vs. BIA vs. Anthropometry for Tracking Body Composition Changes in Bodybuilders: Reliability and Practical Applications',
    authors: 'Chang R, Wilkins LF, Robertson GP.',
    journal: 'Journal of Strength and Conditioning Research',
    year: 2024,
    doi: '10.1519/JSC.0000000000004321',
    abstract: 'This study compared the reliability and validity of three body composition assessment methods in competitive bodybuilders during both bulking and cutting phases. The researchers evaluated DEXA, bioelectrical impedance analysis (BIA), and anthropometric measurements for tracking changes over time.',
    evidenceLevel: 'B',
    keyFindings: [
      'DEXA showed highest absolute accuracy but with significant cost and accessibility limitations',
      'High-quality BIA devices demonstrated good relative reliability for tracking changes despite absolute accuracy issues',
      'Anthropometric measurements (particularly 7-site skinfold) showed excellent reliability for tracking changes when performed by skilled practitioners',
      'All methods were affected by hydration status, with BIA showing highest sensitivity to these fluctuations'
    ],
    practicalApplications: 'For most bodybuilders, a combination of consistent anthropometric measurements (including skinfolds, girths, and weight) provides the most practical and reliable method for tracking body composition changes. When available, periodic DEXA scans can provide valuable calibration points, particularly when transitioning between preparation phases.',
    category: 'assessment',
    tags: ['body composition', 'DEXA', 'skinfold', 'measurement']
  }
];

// src/mockData/knowledgeBase.js
export const mockKnowledgeBase = [
  {
    id: '1101',
    title: 'Progressive Overload: Principles and Application',
    content: `
# Progressive Overload: Principles and Application

Progressive overload is the gradual increase of stress placed on the body during exercise training. It is a fundamental principle for continued adaptation and improvement in physical fitness.

## Scientific Basis

When subjected to stressors beyond what it's accustomed to, the body adapts to better handle that stimulus in the future. Without progressive increases in training stress, adaptation stagnates and progress plateaus.

## Implementation Methods

1. **Weight Progression**: Increasing the resistance used for an exercise
2. **Volume Progression**: Increasing sets and/or repetitions 
3. **Density Progression**: Completing the same amount of work in less time
4. **Technique Progression**: Moving to more challenging exercise variations
5. **Range of Motion Progression**: Increasing the effective range of motion
6. **Frequency Progression**: Increasing training frequency for a muscle group

## Practical Application

For novice trainees, simple linear progression of weights works effectively. Intermediate and advanced trainees often require more sophisticated approaches like double progression, undulating periodization, or block periodization.

## Evidence-Based Recommendations

- **Novice**: Increase weight 2.5-5% when target repetitions are achieved
- **Intermediate**: Cycle volume and intensity across different timeframes
- **Advanced**: Use specialized techniques like rest-pause, myo-reps, and intensification methods to drive further adaptation

Progressive overload must be balanced with recovery. Excessive progression rates can lead to excessive fatigue, technique breakdown, and injury. Progression should occur at a sustainable rate that allows for continued adaptation without compromising recovery.

## References

1. Schoenfeld BJ, et al. (2023). Resistance Training Volume Enhances Muscle Hypertrophy. Sports Medicine, 53(1), 98-112.
2. Helms ER, et al. (2022). Evidence-Based Recommendations for Natural Bodybuilding Contest Preparation. Journal of the International Society of Sports Nutrition, 19(1), 1-20.
3. Haff GG, et al. (2023). Periodization for Optimizing Strength and Hypertrophy. Strength and Conditioning Journal, 45(2), 66-79.
    `,
    category: 'training',
    tags: ['progression', 'overload', 'adaptation', 'periodization'],
    author: 'Coaching App Research Team',
    lastUpdated: '2025-03-10T10:15:00Z',
    evidenceLevel: 'A'
  },
  {
    id: '1102',
    title: 'Protein Requirements for Muscle Hypertrophy',
    content: `
# Protein Requirements for Muscle Hypertrophy

Protein intake is a critical component of nutrition for promoting muscle growth (hypertrophy). Ensuring optimal protein consumption maximizes muscle protein synthesis and supports recovery.

## Scientific Consensus

Current research supports higher protein intakes for individuals engaged in resistance training compared to sedentary populations. While the RDA for protein is 0.8 g/kg/day for general health, this is insufficient for maximizing muscle hypertrophy.

## Optimal Intake Ranges

- **Maintenance**: 1.6-2.2 g/kg/day for trained individuals
- **Caloric Surplus**: 1.6-2.2 g/kg/day when gaining weight
- **Caloric Deficit**: 2.0-2.8 g/kg/day when losing weight
- **Contest Preparation**: 2.3-3.1 g/kg/day during extreme conditions

These recommendations are for total body weight, not lean body mass, and represent daily targets.

## Protein Quality and Digestibility

Not all protein sources are equal. Factors affecting protein quality include:

- **Amino Acid Profile**: Complete proteins contain all essential amino acids
- **Leucine Content**: Higher leucine content (2-3g per meal) better stimulates MPS
- **Digestibility**: Affects amino acid availability and utilization

Animal proteins generally score higher in these metrics, but plant proteins can be effective when consumed in sufficient quantity and variety.

## Protein Distribution

Evidence supports distributing protein intake across 4-6 meals per day, with each meal containing 0.3-0.5 g/kg of high-quality protein to maximize the anabolic response. Post-workout protein intake is important but not significantly more important than meeting total daily requirements and proper distribution.

## Special Considerations

- **Night-time Protein**: Slow-digesting proteins before sleep may enhance overnight recovery
- **Training Status**: More advanced trainees may benefit from the higher end of the intake ranges
- **Age**: Older individuals often require higher protein intakes to overcome anabolic resistance

## References

1. Morton RW, et al. (2023). A systematic review, meta-analysis and meta-regression of the effect of protein supplementation on resistance training-induced gains in muscle mass and strength in healthy adults. British Journal of Sports Medicine, 57(1), 32-41.
2. Helms ER, et al. (2024). Evidence-based recommendations for natural bodybuilding contest preparation: nutrition and supplementation. Journal of the International Society of Sports Nutrition, 21(1), 10-22.
3. Schoenfeld BJ & Aragon AA. (2023). How much protein can the body use in a single meal for muscle-building? Implications for daily protein distribution. Journal of the International Society of Sports Nutrition, 20(1), 54-67.
    `,
    category: 'nutrition',
    tags: ['protein', 'hypertrophy', 'muscle protein synthesis', 'nutrition'],
    author: 'Coaching App Research Team',
    lastUpdated: '2025-02-15T14:30:00Z',
    evidenceLevel: 'A'
  },
  {
    id: '1103',
    title: 'Testosterone and Performance Enhancement: Risks and Benefits',
    content: `
# Testosterone and Performance Enhancement: Risks and Benefits

Testosterone is the primary male sex hormone and an anabolic steroid. When used for performance enhancement, it presents both potential benefits and significant risks.

## Physiological Effects

Supraphysiological doses of testosterone produce several effects:

- **Increased Nitrogen Retention**: Enhanced protein synthesis and muscle growth
- **Enhanced Recovery**: Reduced recovery time between training sessions
- **Increased Red Blood Cell Production**: Improved oxygen delivery and endurance
- **Decreased Body Fat**: Especially in the abdominal region
- **Increased Bone Mineral Density**: Strengthening of skeletal structure

## Performance Benefits

Research indicates potential performance enhancements including:

- 5-20% increases in strength depending on dosage and duration
- 3-7 kg of lean mass gain over 10-12 weeks (with proper training and nutrition)
- Improved power output and explosive performance
- Enhanced glycogen storage capacity
- Accelerated recovery between training sessions

## Health Risks

Significant health concerns associated with testosterone use include:

- **Cardiovascular**: Altered lipid profiles, increased blood pressure, ventricular hypertrophy
- **Endocrine**: Suppression of natural testosterone production, potential long-term HPTA dysfunction
- **Hepatic**: Increased liver stress (primarily with oral derivatives)
- **Psychological**: Potential mood alterations, aggression, and dependency
- **Cosmetic**: Acne, hair loss (in genetically predisposed individuals), gynecomastia

## Risk Mitigation Strategies

While not eliminating risks, certain strategies may reduce harm:

- Regular blood work monitoring (lipids, hematocrit, hormones, liver enzymes)
- Cardiovascular support (diet, cardio, supplements)
- Appropriate post-cycle therapy
- Using the minimum effective dose
- Maintaining healthy lifestyle factors (sleep, nutrition, stress management)

## Legal and Ethical Considerations

Testosterone is a controlled substance in most countries and banned by all major sporting organizations. Use without medical prescription carries legal risks and ethical considerations regarding fair competition.

## References

1. Bhasin S, et al. (2021). Testosterone Therapy in Men With Hypogonadism: An Endocrine Society Clinical Practice Guideline. Journal of Clinical Endocrinology & Metabolism, 106(1), 1-31.
2. Pope HG, et al. (2023). Adverse Health Consequences of Performance-Enhancing Drugs: An Endocrine Society Scientific Statement. Endocrine Reviews, 44(1), 128-169.
3. Rasmussen JJ, et al. (2022). Recovery of Testicular Function After Anabolic Steroid Use. Journal of Clinical Endocrinology & Metabolism, 107(6), 1825-1836.
    `,
    category: 'PEDs',
    tags: ['testosterone', 'anabolic steroids', 'performance enhancement', 'health risks'],
    author: 'Coaching App Research Team',
    lastUpdated: '2025-03-20T09:45:00Z',
    evidenceLevel: 'B'
  },
  {
    id: '1104',
    title: 'Proper Form and Technique for the Squat',
    content: `
# Proper Form and Technique for the Squat

The barbell squat is often called the "king of exercises" for its effectiveness in building lower body strength and muscle mass. Proper technique is crucial for both safety and results.

## Setup and Starting Position

1. **Bar Placement**: Position the bar on the upper back across the trapezius muscles (high bar) or slightly lower across the posterior deltoids (low bar)
2. **Hand Position**: Grip the bar with hands slightly wider than shoulder-width
3. **Foot Stance**: Place feet shoulder-width to slightly wider apart, with toes pointed slightly outward (10-30 degrees)
4. **Brace Core**: Take a deep breath into the diaphragm and brace the core muscles
5. **Unrack**: Stand up with the weight, take 2-3 small steps backward

## Execution

1. **Descent**: Initiate by breaking at the hips and knees simultaneously
2. **Depth**: Lower until thighs are parallel to the ground or deeper based on mobility and goals
3. **Knee Tracking**: Keep knees in line with toes throughout the movement
4. **Back Position**: Maintain a neutral spine position with natural lordotic curve
5. **Weight Distribution**: Keep weight balanced over mid-foot
6. **Ascent**: Drive through heels and mid-foot, maintain torso angle initially, extend hips and knees to return to starting position

## Common Errors and Corrections

- **Knee Valgus**: Knees collapsing inward
  - Correction: Focus on pushing knees outward, strengthen glutes, use cues like "spread the floor"
  
- **Excessive Forward Lean**: Torso angle too horizontal
  - Correction: Maintain more upright posture, potentially adjust stance width or bar position
  
- **Heels Rising**: Weight shifting to toes
  - Correction: Focus on driving through heels, potentially address ankle mobility limitations
  
- **Depth Issues**: Not reaching sufficient depth
  - Correction: Address mobility limitations, potentially use lighter weight to train proper depth

## Variations Based on Goals

- **Strength Focus**: Low bar position, moderate stance width, depth to just below parallel
- **Quad Development**: High bar position, narrower stance, deeper depth
- **Posterior Chain Emphasis**: Low bar position, wider stance, more hip hinge
- **Olympic Lifting Transfer**: High bar position, upright torso, maximum depth

## References

1. Schoenfeld BJ. (2023). Squatting Kinematics and Kinetics and Their Application to Exercise Performance. Journal of Strength and Conditioning Research, 37(5), 1042-1060.
2. Glassbrook DJ, et al. (2024). The Front and Back Squat: A Review of Biomechanical Differences and Similarities. Strength and Conditioning Journal, 46(1), 7-18.
3. Lorenzetti S, et al. (2022). Comparison of the Angles and Corresponding Moments in the Knee and Hip during Restricted and Unrestricted Squats. Journal of Applied Biomechanics, 38(2), 123-134.
    `,
    category: 'training',
    tags: ['squat', 'technique', 'form', 'exercise'],
    author: 'Coaching App Research Team',
    lastUpdated: '2025-01-25T11:20:00Z',
    evidenceLevel: 'A'
  },
  {
    id: '1105',
    title: 'Metabolic Adaptation During Caloric Restriction',
    content: `
# Metabolic Adaptation During Caloric Restriction

Metabolic adaptation refers to the body's physiological responses to prolonged caloric restriction, which ultimately make continued fat loss more challenging and increase the likelihood of weight regain.

## Mechanisms of Metabolic Adaptation

Several integrated systems contribute to metabolic adaptation:

- **Basal Metabolic Rate (BMR) Reduction**: Decreased energy expenditure at rest beyond what would be expected from simple weight loss
- **Hormonal Changes**: Alterations in regulatory hormones including leptin, thyroid hormones, testosterone, and insulin
- **Mitochondrial Efficiency**: Enhanced efficiency of ATP production, reducing caloric expenditure
- **NEAT Reduction**: Subconscious decrease in non-exercise activity thermogenesis
- **Exercise Efficiency**: Improved mechanical efficiency during physical activity, requiring fewer calories for the same work

## Timeline and Magnitude

Research indicates that significant adaptations begin after 3-4 weeks of sustained caloric restriction. The magnitude depends on several factors:

- **Deficit Size**: Larger deficits produce more pronounced adaptations
- **Initial Body Fat Levels**: Leaner individuals experience greater adaptive responses
- **Deficit Duration**: Longer periods of restriction enhance the adaptive response
- **Rate of Weight Loss**: Faster weight loss typically triggers stronger adaptations

Studies suggest that metabolic adaptation can reduce total daily energy expenditure by approximately 15-30% beyond what would be expected from weight loss alone.

## Practical Mitigation Strategies

Several evidence-based approaches can help minimize the impact of metabolic adaptation:

- **Diet Breaks**: Structured periods (1-2 weeks) at maintenance calories
- **Refeeds**: Strategic high-carbohydrate days within a deficit
- **Reverse Dieting**: Gradual, controlled increase of calories post-diet
- **Exercise Manipulation**: Emphasizing resistance training to preserve lean mass
- **Sleep Optimization**: Maintaining good sleep hygiene to support hormonal function
- **Protein Adequacy**: Higher protein intake (2.2-3.4 g/kg) during restriction
- **Rate Management**: Targeting moderate rates of weight loss (0.5-1% of body weight per week)

## Recovery After Restriction

Post-diet recovery of metabolic function is possible but often requires:

- **Time**: Full recovery typically takes 4-8+ weeks at maintenance calories
- **Patience**: Rapid increases in calories often lead to excessive fat gain
- **Structure**: Systematic approach to calorie increases
- **Acceptance**: Some degree of fat regain is typically unavoidable during recovery

## References

1. Trexler ET, et al. (2023). Metabolic adaptation to weight loss: implications for the athlete. Journal of the International Society of Sports Nutrition, 20(1), 36-49.
2. Helms ER, et al. (2024). Nutrition strategies to minimize adaptive thermogenesis during body fat loss: A narrative review. Obesity Reviews, 25(3), e13561.
3. MacLean PS, et al. (2022). Biology's response to dieting: the impetus for weight regain. American Journal of Physiology-Regulatory, Integrative and Comparative Physiology, 323(5), R583-R600.
    `,
    category: 'nutrition',
    tags: ['metabolic adaptation', 'dieting', 'weight loss', 'metabolism'],
    author: 'Coaching App Research Team',
    lastUpdated: '2025-02-05T16:40:00Z',
    evidenceLevel: 'A'
  }
];

// src/mockData/utils.js
// Import the mock data
import { mockClients } from './clients';
import { mockCoachStats } from './stats';
import { mockActionItems } from './actionItems';
import { mockActivities } from './activities';
import { mockClientMetrics } from './metrics';
import { mockNextWorkout } from './workouts';
import { mockNutritionPlan } from './nutrition';
import { mockSupplementPlan } from './supplements';
import { mockNextCheckIn } from './checkIn';
import { mockExercises } from './exercises';
import { mockFoods } from './foods';
import { mockSupplements } from './supplements';
import { mockPEDs } from './peds';
import { mockBloodwork } from './bloodwork';
import { mockResearch } from './research';
import { mockKnowledgeBase } from './knowledgeBase';

// Create a mock API response helper function
export const createMockResponse = (data, delay = 500) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        status: 200,
        data,
      });
    }, delay);
  });
};

// Mock services for development
export const mockClientService = {
  getClients: (params = {}) => {
    return createMockResponse({ clients: mockClients });
  },
  getClient: (clientId) => {
    const client = mockClients.find((c) => c.id === clientId);
    return createMockResponse({ client });
  },
  getCoachStats: () => {
    return createMockResponse({ stats: mockCoachStats });
  },
  getClientData: () => {
    // Simulate the first client's data
    const client = mockClients[0];
    return createMockResponse({
      ...client,
      metrics: mockClientMetrics,
    });
  },
  getActionItems: () => {
    return createMockResponse({ items: mockActionItems });
  },
  getRecentActivities: () => {
    return createMockResponse({ activities: mockActivities });
  },
  getNextWorkout: () => {
    return createMockResponse({ workout: mockNextWorkout });
  },
  getCurrentNutritionPlan: () => {
    return createMockResponse({ plan: mockNutritionPlan });
  },
  getCurrentSupplementPlan: () => {
    return createMockResponse({ plan: mockSupplementPlan });
  },
  getNextCheckIn: () => {
    return createMockResponse({ checkIn: mockNextCheckIn });
  },
};

export const mockTrainingService = {
  getExercises: (params = {}) => {
    return createMockResponse({ exercises: mockExercises });
  },
  getExercise: (exerciseId) => {
    const exercise = mockExercises.find((e) => e.id === exerciseId);
    return createMockResponse({ exercise });
  },
};

export const mockNutritionService = {
  getFoods: (params = {}) => {
    return createMockResponse({ foods: mockFoods });
  },
  getFood: (foodId) => {
    const food = mockFoods.find((f) => f.id === foodId);
    return createMockResponse({ food });
  },
};

export const mockSupplementService = {
  getSupplements: (params = {}) => {
    return createMockResponse({ supplements: mockSupplements });
  },
  getSupplement: (supplementId) => {
    const supplement = mockSupplements.find((s) => s.id === supplementId);
    return createMockResponse({ supplement });
  },
  getPEDs: (params = {}) => {
    return createMockResponse({ peds: mockPEDs });
  },
  getPED: (pedId) => {
    const ped = mockPEDs.find((p) => p.id === pedId);
    return createMockResponse({ ped });
  },
};

export const mockHealthService = {
  getBloodworkHistory: (params = {}) => {
    return createMockResponse({ bloodwork: mockBloodwork });
  },
};

export const mockResearchService = {
  getResearchLibrary: (params = {}) => {
    return createMockResponse({ studies: mockResearch });
  },
  getStudy: (studyId) => {
    const study = mockResearch.find((s) => s.id === studyId);
    return createMockResponse({ study });
  },
  getKnowledgeBase: (params = {}) => {
    return createMockResponse({ articles: mockKnowledgeBase });
  },
  getKnowledgeBaseArticle: (articleId) => {
    const article = mockKnowledgeBase.find((a) => a.id === articleId);
    return createMockResponse({ article });
  },
};

// Export a function to initialize mock services (in development environment)
export const initMockServices = () => {
  if (process.env.NODE_ENV !== 'production') {
    // Replace actual services with mock services for development
    // This can be expanded as needed
    window.mockServices = {
      client: mockClientService,
      training: mockTrainingService,
      nutrition: mockNutritionService,
      supplement: mockSupplementService,
      health: mockHealthService,
      research: mockResearchService,
    };
    
    console.log('Mock services initialized for development');
  }
};
// src/mockData/clients.js
export const mockClients = [
  {
    id: '1',
    name: 'John Smith',
    email: 'john.smith@example.com',
    profileImage: null,
    age: 32,
    gender: 'male',
    height: 182, // cm
    startingWeight: 95, // kg
    currentWeight: 88, // kg
    goal: 'fat-loss',
    experience: 'intermediate',
    lastCheckIn: '2025-04-10T08:00:00Z',
    nextCheckIn: '2025-04-17T08:00:00Z',
    progress: -5.2,
    complianceRate: 92,
    startDate: '2025-01-15T08:00:00Z',
    programId: '1',
    nutritionPlanId: '1',
    supplementPlanId: '1',
  },
  {
    id: '2',
    name: 'Sarah Johnson',
    email: 'sarah.johnson@example.com',
    profileImage: null,
    age: 28,
    gender: 'female',
    height: 168, // cm
    startingWeight: 65, // kg
    currentWeight: 68, // kg
    goal: 'muscle-gain',
    experience: 'beginner',
    lastCheckIn: '2025-04-12T08:00:00Z',
    nextCheckIn: '2025-04-19T08:00:00Z',
    progress: 4.6,
    complianceRate: 85,
    startDate: '2025-02-01T08:00:00Z',
    programId: '2',
    nutritionPlanId: '2',
    supplementPlanId: '2',
  },
  {
    id: '3',
    name: 'David Lee',
    email: 'david.lee@example.com',
    profileImage: null,
    age: 35,
    gender: 'male',
    height: 175, // cm
    startingWeight: 82, // kg
    currentWeight: 79, // kg
    goal: 'recomposition',
    experience: 'advanced',
    lastCheckIn: '2025-04-13T08:00:00Z',
    nextCheckIn: '2025-04-20T08:00:00Z',
    progress: -3.7,
    complianceRate: 97,
    startDate: '2025-02-15T08:00:00Z',
    programId: '3',
    nutritionPlanId: '3',
    supplementPlanId: '3',
  },
  {
    id: '4',
    name: 'Emily Davis',
    email: 'emily.davis@example.com',
    profileImage: null,
    age: 30,
    gender: 'female',
    height: 165, // cm
    startingWeight: 62, // kg
    currentWeight: 59, // kg
    goal: 'competition-prep',
    experience: 'advanced',
    lastCheckIn: '2025-04-14T08:00:00Z',
    nextCheckIn: '2025-04-21T08:00:00Z',
    progress: -4.8,
    complianceRate: 98,
    startDate: '2025-03-01T08:00:00Z',
    programId: '4',
    nutritionPlanId: '4',
    supplementPlanId: '4',
  },
  {
    id: '5',
    name: 'Michael Brown',
    email: 'michael.brown@example.com',
    profileImage: null,
    age: 40,
    gender: 'male',
    height: 188, // cm
    startingWeight: 105, // kg
    currentWeight: 95, // kg
    goal: 'fat-loss',
    experience: 'intermediate',
    lastCheckIn: '2025-04-11T08:00:00Z',
    nextCheckIn: '2025-04-18T08:00:00Z',
    progress: -9.5,
    complianceRate: 88,
    startDate: '2025-01-20T08:00:00Z',
    programId: '5',
    nutritionPlanId: '5',
    supplementPlanId: '5',
  },
];

// src/mockData/stats.js
export const mockCoachStats = {
  totalClients: 12,
  activeClients: 8,
  checkInsCompleted: 45,
  checkInsPending: 3,
  averageProgress: 6.2,
  totalRevenue: 5670,
};

// src/mockData/actionItems.js
export const mockActionItems = [
  {
    id: '1',
    title: 'Review John Smith\'s check-in',
    description: 'Weight stalled, review nutrition plan and make adjustments.',
    priority: 'high',
    client: 'John Smith',
    dueDate: '2025-04-15T23:59:59Z',
  },
  {
    id: '2',
    title: 'Update Sarah Johnson\'s training program',
    description: 'Current program ends this week, prepare next phase.',
    priority: 'medium',
    client: 'Sarah Johnson',
    dueDate: '2025-04-17T23:59:59Z',
  },
  {
    id: '3',
    title: 'Follow up on bloodwork results',
    description: 'David Lee submitted bloodwork results that need analysis.',
    priority: 'medium',
    client: 'David Lee',
    dueDate: '2025-04-16T23:59:59Z',
  },
  {
    id: '4',
    title: 'Prepare competition peak week plan',
    description: 'Emily\'s competition is in 3 weeks, finalize peak week strategy.',
    priority: 'high',
    client: 'Emily Davis',
    dueDate: '2025-04-18T23:59:59Z',
  },
];

// src/mockData/activities.js
export const mockActivities = [
  {
    id: '1',
    type: 'check-in',
    title: 'Check-in Submitted',
    description: 'John Smith submitted their weekly check-in.',
    date: '2025-04-14T09:23:12Z',
    client: 'John Smith',
    link: '/clients/1/check-ins',
  },
  {
    id: '2',
    type: 'workout',
    title: 'Workout Completed',
    description: 'Sarah Johnson completed "Pull Day A" workout with 2 PRs.',
    date: '2025-04-14T17:45:30Z',
    client: 'Sarah Johnson',
    link: '/clients/2/workouts',
  },
  {
    id: '3',
    type: 'nutrition',
    title: 'Nutrition Plan Updated',
    description: 'Updated David Lee\'s nutrition plan with carb cycling approach.',
    date: '2025-04-14T15:12:48Z',
    client: 'David Lee',
    link: '/clients/3/nutrition',
  },
  {
    id: '4',
    type: 'client',
    title: 'New Client Added',
    description: 'Added Michael Brown as a new client.',
    date: '2025-04-14T11:34:22Z',
    client: 'Michael Brown',
    link: '/clients/5',
  },
  {
    id: '5',
    type: 'supplement',
    title: 'Supplement Protocol Updated',
    description: 'Updated Emily Davis\'s supplement protocol for competition prep.',
    date: '2025-04-13T16:28:55Z',
    client: 'Emily Davis',
    link: '/clients/4/supplements',
  },
];

// src/mockData/metrics.js
export const mockClientMetrics = [
  {
    date: '2025-03-15T08:00:00Z',
    weight: 95,
    bodyFat: 22,
    waist: 96,
    chest: 110,
    arms: 38,
    legs: 65,
  },
  {
    date: '2025-03-22T08:00:00Z',
    weight: 93.5,
    bodyFat: 21.3,
    waist: 94.5,
    chest: 109.5,
    arms: 38.2,
    legs: 64.5,
  },
  {
    date: '2025-03-29T08:00:00Z',
    weight: 92.1,
    bodyFat: 20.8,
    waist: 93.2,
    chest: 109,
    arms: 38.5,
    legs: 64.2,
  },
  {
    date: '2025-04-05T08:00:00Z',
    weight: 90.4,
    bodyFat: 20.1,
    waist: 91.8,
    chest: 108.5,
    arms: 38.8,
    legs: 63.8,
  },
  {
    date: '2025-04-12T08:00:00Z',
    weight: 88.7,
    bodyFat: 19.4,
    waist: 90.5,
    chest: 108,
    arms: 39,
    legs: 63.5,
  },
];

// src/mockData/workouts.js
export const mockNextWorkout = {
  id: '101',
  title: 'Pull Day A',
  scheduledDate: '2025-04-16T18:00:00Z',
  duration: 75, // minutes
  exercises: [
    {
      id: '1001',
      name: 'Deadlift',
      sets: 4,
      reps: 5,
      weight: 120,
      notes: 'Focus on form, especially back position',
    },
    {
      id: '1002',
      name: 'Pull-ups',
      sets: 4,
      reps: 8,
      weight: 0,
      notes: 'Add weight if too easy',
    },
    {
      id: '1003',
      name: 'Barbell Rows',
      sets: 3,
      reps: 10,
      weight: 70,
      notes: 'Strict form, no momentum',
    },
    {
      id: '1004',
      name: 'Face Pulls',
      sets: 3,
      reps: 15,
      weight: 25,
      notes: 'Focus on external rotation',
    },
    {
      id: '1005',
      name: 'Bicep Curls',
      sets: 3,
      reps: 12,
      weight: 15,
      notes: 'Superset with hammer curls',
    },
    {
      id: '1006',
      name: 'Hammer Curls',
      sets: 3,
      reps: 12,
      weight: 15,
      notes: 'Superset with bicep curls',
    },
  ],
  notes: 'Focus on progressive overload from last session. Record all weights and reps.',
};

// src/mockData/nutrition.js
export const mockNutritionPlan = {
  id: '201',
  name: 'Fat Loss Phase 2',
  calories: 2200,
  protein: 180,
  carbs: 220,
  fat: 60,
  meals: [
    {
      id: '2001',
      name: 'Breakfast',
      time: '08:00',
      calories: 500,
      protein: 40,
      carbs: 50,
      fat: 15,
      foods: [
        { id: '20001', name: 'Eggs', serving: '3 whole eggs' },
        { id: '20002', name: 'Oatmeal', serving: '1 cup cooked' },
        { id: '20003', name: 'Blueberries', serving: '1/2 cup' },
        { id: '20004', name: 'Almond Butter', serving: '1 tbsp' },
      ],
    },
    {
      id: '2002',
      name: 'Lunch',
      time: '12:00',
      calories: 650,
      protein: 50,
      carbs: 70,
      fat: 15,
      foods: [
        { id: '20005', name: 'Chicken Breast', serving: '6 oz' },
        { id: '20006', name: 'Brown Rice', serving: '1 cup cooked' },
        { id: '20007', name: 'Broccoli', serving: '2 cups' },
        { id: '20008', name: 'Olive Oil', serving: '1 tbsp' },
      ],
    },
    {
      id: '2003',
      name: 'Pre-Workout Snack',
      time: '16:00',
      calories: 250,
      protein: 20,
      carbs: 35,
      fat: 2,
      foods: [
        { id: '20009', name: 'Protein Shake', serving: '1 scoop' },
        { id: '20010', name: 'Banana', serving: '1 medium' },
      ],
    },
    {
      id: '2004',
      name: 'Post-Workout',
      time: '19:00',
      calories: 300,
      protein: 30,
      carbs: 40,
      fat: 3,
      foods: [
        { id: '20011', name: 'Protein Shake', serving: '1.5 scoops' },
        { id: '20012', name: 'Dextrose', serving: '25g' },
        { id: '20013', name: 'Creatine', serving: '5g' },
      ],
    },
    {
      id: '2005',
      name: 'Dinner',
      time: '20:00',
      calories: 500,
      protein: 40,
      carbs: 25,
      fat: 25,
      foods: [
        { id: '20014', name: 'Salmon', serving: '6 oz' },
        { id: '20015', name: 'Sweet Potato', serving: '1 medium' },
        { id: '20016', name: 'Asparagus', serving: '2 cups' },
        { id: '20017', name: 'Avocado', serving: '1/4' },
      ],
    },
  ],
  progress: {
    consumedCalories: 1400,
    consumedProtein: 110,
    consumedCarbs: 150,
    consumedFat: 35,
    completedMeals: ['2001', '2002', '2003'],
  },
};

// src/mockData/supplements.js
export const mockSupplementPlan = {
  id: '301',
  supplements: {
    morning: [
      {
        id: '3001',
        name: 'Multivitamin',
        dosage: 1,
        unit: 'tablet',
        timing: 'with breakfast',
      },
      {
        id: '3002',
        name: 'Fish Oil',
        dosage: 2,
        unit: 'capsules',
        timing: 'with breakfast',
        notes: '2000mg EPA/DHA combined',
      },
      {
        id: '3003',
        name: 'Vitamin D3',
        dosage: 5000,
        unit: 'IU',
        timing: 'with breakfast',
      },
    ],
    pre_workout: [
      {
        id: '3004',
        name: 'Pre-Workout',
        dosage: 1,
        unit: 'scoop',
        timing: '30 minutes before training',
      },
      {
        id: '3005',
        name: 'Citrulline Malate',
        dosage: 8,
        unit: 'g',
        timing: '30 minutes before training',
      },
      {
        id: '3006',
        name: 'Beta-Alanine',
        dosage: 3.2,
        unit: 'g',
        timing: '30 minutes before training',
      },
    ],
    post_workout: [
      {
        id: '3007',
        name: 'Creatine Monohydrate',
        dosage: 5,
        unit: 'g',
        timing: 'immediately after training',
      },
      {
        id: '3008',
        name: 'Whey Protein',
        dosage: 30,
        unit: 'g',
        timing: 'immediately after training',
      },
    ],
    evening: [
      {
        id: '3009',
        name: 'ZMA',
        dosage: 1,
        unit: 'serving',
        timing: 'before bed',
        notes: 'Take on empty stomach',
      },
      {
        id: '3010',
        name: 'Magnesium Glycinate',
        dosage: 300,
        unit: 'mg',
        timing: 'before bed',
      },
    ],
  },
  completed: {
    morning: ['3001', '3002'],
    pre_workout: ['3004', '3005', '3006'],
    post_workout: [],
    evening: [],
  },
};

// src/mockData/checkIn.js
export const mockNextCheckIn = {
  id: '401',
  date: '2025-04-17T08:00:00Z',
  isOverdue: false,
  daysRemaining: 2,
  requiresPhotos: true,
  requiresBodyMeasurements: true,
  requiresSelfAssessment: true,
  requiresTrainingFeedback: true,
  requiresNutritionFeedback: true,
};

// src/mockData/exercises.js
export const mockExercises = [
  {
    id: '501',
    name: 'Barbell Bench Press',
    category: 'chest',
    equipment: 'barbell',
    difficulty: 'intermediate',
    instructions: 'Lie on a flat bench, grip the barbell slightly wider than shoulder-width apart. Lower the bar to your chest, then press back up to full arm extension.',
    muscles: {
      primary: ['chest'],
      secondary: ['triceps', 'shoulders'],
    },
    videoUrl: 'https://example.com/videos/bench-press.mp4',
    thumbnailUrl: 'https://example.com/images/bench-press.jpg',
  },
  {
    id: '502',
    name: 'Barbell Squat',
    category: 'legs',
    equipment: 'barbell',
    difficulty: 'intermediate',
    instructions: 'Place a barbell on your upper back, feet shoulder-width apart. Bend your knees and hips to lower down, keeping your back straight. Return to standing position.',
    muscles: {
      primary: ['quadriceps', 'glutes'],
      secondary: ['hamstrings', 'calves', 'lower back'],
    },
    videoUrl: 'https://example.com/videos/squat.mp4',
    thumbnailUrl: 'https://example.com/images/squat.jpg',
  },
  {
    id: '503',
    name: 'Deadlift',
    category: 'back',
    equipment: 'barbell',
    difficulty: 'advanced',
    instructions: 'Stand with feet hip-width apart, barbell over feet. Bend at hips and knees to grip the bar. Keeping back flat, stand up by driving through heels.',
    muscles: {
      primary: ['lower back', 'glutes', 'hamstrings'],
      secondary: ['traps', 'lats', 'forearms'],
    },
    videoUrl: 'https://example.com/videos/deadlift.mp4',
    thumbnailUrl: 'https://example.com/images/deadlift.jpg',
  },
  {
    id: '504',
    name: 'Pull-up',
    category: 'back',
    equipment: 'bodyweight',
    difficulty: 'intermediate',
    instructions: 'Hang from a bar with hands slightly wider than shoulder-width. Pull yourself up until chin is over the bar, then lower back down with control.',
    muscles: {
      primary: ['lats', 'biceps'],
      secondary: ['forearms', 'shoulders', 'traps'],
    },
    videoUrl: 'https://example.com/videos/pull-up.mp4',
    thumbnailUrl: 'https://example.com/images/pull-up.jpg',
  },
  {
    id: '505',
    name: 'Dumbbell Shoulder Press',
    category: 'shoulders',
    equipment: 'dumbbell',
    difficulty: 'intermediate',
    instructions: 'Sit or stand with dumbbells at shoulder height. Press the weights directly overhead until arms are fully extended. Lower back to starting position.',
    muscles: {
      primary: ['shoulders'],
      secondary: ['triceps', 'traps'],
    },
    videoUrl: 'https://example.com/videos/shoulder-press.mp4',
    thumbnailUrl: 'https://example.com/images/shoulder-press.jpg',
  },
];

// src/mockData/foods.js
export const mockFoods = [
  {
    id: '601',
    name: 'Chicken Breast',
    category: 'protein',
    servingSize: 100, // grams
    calories: 165,
    protein: 31,
    carbs: 0,
    fat: 3.6,
    fiber: 0,
    vitamins: {
      A: 0,
      C: 0,
      D: 0,
      E: 0,
      K: 0,
      B6: 0.6, // mg
      B12: 0.3, // mcg
    },
    minerals: {
      calcium: 15, // mg
      iron: 1, // mg
      magnesium: 29, // mg
      phosphorus: 228, // mg
      potassium: 256, // mg
      sodium: 74, // mg
      zinc: 1, // mg
    },
  },
  {
    id: '602',
    name: 'Brown Rice',
    category: 'carb',
    servingSize: 100, // grams cooked
    calories: 112,
    protein: 2.6,
    carbs: 23.5,
    fat: 0.9,
    fiber: 1.8,
    vitamins: {
      A: 0,
      C: 0,
      D: 0,
      E: 0,
      K: 0,
      B6: 0.1, // mg
      B12: 0, // mcg
    },
    minerals: {
      calcium: 10, // mg
      iron: 0.5, // mg
      magnesium: 43, // mg
      phosphorus: 83, // mg
      potassium: 79, // mg
      sodium: 5, // mg
      zinc: 0.6, // mg
    },
  },
  {
    id: '603',
    name: 'Salmon',
    category: 'protein',
    servingSize: 100, // grams
    calories: 208,
    protein: 20.4,
    carbs: 0,
    fat: 13.4,
    fiber: 0,
    vitamins: {
      A: 58, // IU
      C: 3.9, // mg
      D: 526, // IU
      E: 1.1, // mg
      K: 0.3, // mcg
      B6: 0.8, // mg
      B12: 2.8, // mcg
    },
    minerals: {
      calcium: 12, // mg
      iron: 0.8, // mg
      magnesium: 29, // mg
      phosphorus: 240, // mg
      potassium: 363, // mg
      sodium: 59, // mg
      zinc: 0.6, // mg
    },
  },
  {
    id: '604',
    name: 'Avocado',
    category: 'fat',
    servingSize: 100, // grams
    calories: 160,
    protein: 2,
    carbs: 8.5,
    fat: 14.7,
    fiber: 6.7,
    vitamins: {
      A: 146, // IU
      C: 10, // mg
      D: 0, // IU
      E: 2.1, // mg
      K: 21, // mcg
      B6: 0.3, // mg
      B12: 0, // mcg
    },
    minerals: {
      calcium: 12, // mg
      iron: 0.6, // mg
      magnesium: 29, // mg
      phosphorus: 52, // mg
      potassium: 485, // mg
      sodium: 7, // mg
      zinc: 0.6, // mg
    },
  },
  {
    id: '605',
    name: 'Broccoli',
    category: 'vegetable',
    servingSize: 100, // grams
    calories: 34,
    protein: 2.8,
    carbs: 6.6,
    fat: 0.4,
    fiber: 2.6,
    vitamins: {
      A: 623, // IU
      C: 89.2, // mg
      D: 0, // IU
      E: 0.8, // mg
      K: 101.6, // mcg
      B6: 0.2, // mg
      B12: 0, // mcg
    },
    minerals: {
      calcium: 47, // mg
      iron: 0.7, // mg
      magnesium: 21, // mg
      phosphorus: 66, // mg
      potassium: 316, // mg
      sodium: 33, // mg
      zinc: 0.4, // mg
    },
  },
];

// src/mockData/supplements.js
export const mockSupplements = [
  {
    id: '701',
    name: 'Whey Protein',
    category: 'protein',
    type: 'general',
    description: 'Fast-absorbing protein source derived from milk, ideal for post-workout recovery.',
    dosage: '20-30g',
    timing: 'Post-workout or between meals',
    benefits: [
      'Muscle protein synthesis',
      'Recovery support',
      'Appetite control',
    ],
    sideEffects: [
      'Digestive discomfort (if lactose intolerant)',
      'Bloating in some individuals',
    ],
    evidenceRating: 'A', // A = Strong evidence, B = Moderate evidence, C = Limited evidence, D = Insufficient evidence
    interactions: [],
  },
  {
    id: '702',
    name: 'Creatine Monohydrate',
    category: 'performance',
    type: 'general',
    description: 'Naturally occurring compound that increases ATP production and enhances strength and power output.',
    dosage: '5g daily',
    timing: 'Any time of day, consistency matters more than timing',
    benefits: [
      'Increased strength and power',
      'Enhanced muscle recovery',
      'Improved high-intensity exercise capacity',
      'Potential cognitive benefits',
    ],
    sideEffects: [
      'Water retention (initial)',
      'Digestive discomfort in some individuals',
    ],
    evidenceRating: 'A',
    interactions: [],
  },
  {
    id: '703',
    name: 'Fish Oil',
    category: 'health',
    type: 'general',
    description: 'Source of omega-3 fatty acids EPA and DHA, supporting cardiovascular and cognitive health.',
    dosage: '1-3g of combined EPA/DHA daily',
    timing: 'With meals to increase absorption',
    benefits: [
      'Reduced inflammation',
      'Improved heart health',
      'Joint pain reduction',
      'Potential cognitive benefits',
    ],
    sideEffects: [
      'Fishy aftertaste',
      'Digestive discomfort in some individuals',
    ],
    evidenceRating: 'A',
    interactions: [
      'Blood thinners (consult physician)',
    ],
  },
  {
    id: '704',
    name: 'Vitamin D3',
    category: 'vitamin',
    type: 'general',
    description: 'Fat-soluble vitamin essential for calcium absorption, immune function, and hormone regulation.',
    dosage: '1000-5000 IU daily',
    timing: 'With a fat-containing meal for better absorption',
    benefits: [
      'Bone health',
      'Immune system support',
      'Mood regulation',
      'Muscle function',
    ],
    sideEffects: [
      'Toxicity at extremely high doses (rare)',
    ],
    evidenceRating: 'A',
    interactions: [
      'Some medications (consult physician)',
    ],
  },
  {
    id: '705',
    name: 'Caffeine',
    category: 'performance',
    type: 'general',
    description: 'Stimulant that increases alertness, enhances focus, and improves exercise performance.',
    dosage: '3-6mg per kg of bodyweight',
    timing: '30-60 minutes before training',
    benefits: [
      'Increased alertness and focus',
      'Enhanced endurance performance',
      'Reduced rate of perceived exertion',
      'Increased power output',
    ],
    sideEffects: [
      'Increased heart rate and blood pressure',
      'Jitters and anxiety in some individuals',
      'Sleep disturbances if taken too late in the day',
    ],
    evidenceRating: 'A',
    interactions: [
      'Some medications',
      'Other stimulants',
    ],
  },
];

// src/mockData/peds.js
export const mockPEDs = [
  {
    id: '801',
    name: 'Testosterone Enanthate',
    category: 'AAS',
    type: 'injectable',
    description: 'Long-acting ester of testosterone, the primary male hormone responsible for muscle growth and maintenance.',
    halfLife: '4-5 days',
    dosageRange: '250-500mg per week',
    detectionTime: '3 months',
    effects: [
      'Increased muscle mass',
      'Enhanced strength',
      'Improved recovery',
      'Increased protein synthesis',
    ],
    sideEffects: [
      'Suppression of natural testosterone production',
      'Potential for estrogen-related side effects',
      'Potential androgenic side effects',
      'Potential cardiovascular stress',
    ],
    ancillaries: [
      'Aromatase inhibitor',
      'Post-cycle therapy',
      'Cardiovascular support',
    ],
    notes: 'Typically used as a base compound in many cycles. Requires post-cycle therapy after discontinuation.',
  },
  {
    id: '802',
    name: 'Nandrolone Decanoate',
    category: 'AAS',
    type: 'injectable',
    description: 'Anabolic steroid with strong// src/mockData/clients.js
export const mockClients = [
  {
    id: '1',
    name: 'John Smith',
    email: 'john.smith@example.com',
    profileImage: null,
    age: 32,
    gender: 'male',
    height: 182, // cm
    startingWeight: 95, // kg
    currentWeight: 88, // kg
    goal: 'fat-loss',
    experience: 'intermediate',
    lastCheckIn: '2025-04-10T08:00:00Z',
    nextCheckIn: '2025-04-17T08:00:00Z',
    progress: -5.2,
    complianceRate: 92,
    startDate: '2025-01-15T08:00:00Z',
    programId: '1',
    nutritionPlanId: '1',
    supplementPlanId: '1',
  },
  {
    id: '2',
    name: 'Sarah Johnson',
    email: 'sarah.johnson@example.com',
    profileImage: null,
    age: 28,
    gender: 'female',
    height: 168, // cm
    startingWeight: 65, // kg
    currentWeight: 68, // kg
    goal: 'muscle-gain',
    experience: 'beginner',
    lastCheckIn: '2025-04-12T08:00:00Z',
    nextCheckIn: '2025-04-19T08:00:00Z',
    progress: 4.6,
    complianceRate: 85,
    startDate: '2025-02-01T08:00:00Z',
    programId: '2',
    nutritionPlanId: '2',
    supplementPlanId: '2',
  },
  {
    id: '3',
    name: 'David Lee',
    email: 'david.lee@example

_________


Main Component for Getting Started

// src/hooks/useMockAPI.js
import { useEffect, useState } from 'react';
import { 
  mockClientService, 
  mockTrainingService, 
  mockNutritionService, 
  mockSupplementService, 
  mockHealthService, 
  mockResearchService 
} from '../mockData/utils';

// This hook handles the connection to either real APIs or mock data
// based on the environment and configuration
export const useMockAPI = (serviceName, methodName, params = {}) => {
  const [data, setData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        let response;
        
        // Check if we're using mock data (development) or real API (production)
        if (process.env.NODE_ENV !== 'production' || process.env.REACT_APP_USE_MOCK_API === 'true') {
          // Use mock services
          let mockService;
          switch (serviceName) {
            case 'client':
              mockService = mockClientService;
              break;
            case 'training':
              mockService = mockTrainingService;
              break;
            case 'nutrition':
              mockService = mockNutritionService;
              break;
            case 'supplement':
              mockService = mockSupplementService;
              break;
            case 'health':
              mockService = mockHealthService;
              break;
            case 'research':
              mockService = mockResearchService;
              break;
            default:
              throw new Error(`Unknown service: ${serviceName}`);
          }
          
          // Call the appropriate method on the mock service
          if (typeof mockService[methodName] !== 'function') {
            throw new Error(`Method ${methodName} not found on ${serviceName} service`);
          }
          
          response = await mockService[methodName](params);
        } else {
          // Use real API services
          // You'll replace this with actual API calls when ready
          const apiService = await import(`../services/${serviceName}.service`).default;
          response = await apiService[methodName](params);
        }
        
        setData(response.data);
        setError(null);
      } catch (err) {
        console.error(`Error fetching data from ${serviceName}.${methodName}:`, err);
        setError(err);
        setData(null);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchData();
  }, [serviceName, methodName, JSON.stringify(params)]);
  
  return { data, isLoading, error };
};

// src/index.js (updated)
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { initMockServices } from './mockData/utils';

// Initialize mock services in development
if (process.env.NODE_ENV !== 'production') {
  initMockServices();
}

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

// src/pages/dashboard/CoachDashboard.jsx (updated example using the hook)
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { PlusIcon } from '@heroicons/react/24/outline';
import Card from '../../components/common/Card';
import Button from '../../components/common/Button';
import ClientSummary from '../../components/dashboard/ClientSummary';
import StatsOverview from '../../components/dashboard/StatsOverview';
import RecentActivities from '../../components/dashboard/RecentActivities';
import ActionItems from '../../components/dashboard/ActionItems';
import { useMockAPI } from '../../hooks/useMockAPI';

const CoachDashboard = () => {
  // Use the hook to fetch clients
  const { 
    data: clientsData, 
    isLoading: clientsLoading, 
    error: clientsError 
  } = useMockAPI('client', 'getClients');
  
  // Use the hook to fetch stats
  const { 
    data: statsData, 
    isLoading: statsLoading, 
    error: statsError 
  } = useMockAPI('client', 'getCoachStats');
  
  // Use the hook to fetch action items
  const { 
    data: actionItemsData, 
    isLoading: actionItemsLoading, 
    error: actionItemsError 
  } = useMockAPI('client', 'getActionItems');
  
  // Use the hook to fetch recent activities
  const { 
    data: activitiesData, 
    isLoading: activitiesLoading, 
    error: activitiesError 
  } = useMockAPI('client', 'getRecentActivities');
  
  const isLoading = clientsLoading || statsLoading || actionItemsLoading || activitiesLoading;
  const hasError = clientsError || statsError || actionItemsError || activitiesError;
  
  if (isLoading) {
    return (
      <div className="flex h-full items-center justify-center">
        <p>Loading dashboard data...</p>
      </div>
    );
  }
  
  if (hasError) {
    return (
      <div className="text-center py-8">
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Error Loading Dashboard</h2>
        <p className="text-gray-500">There was a problem loading your dashboard data. Please try again later.</p>
        <Button variant="primary" className="mt-4" onClick={() => window.location.reload()}>
          Retry
        </Button>
      </div>
    );
  }
  
  const clients = clientsData?.clients || [];
  const stats = statsData?.stats || {};
  const actionItems = actionItemsData?.items || [];
  const activities = activitiesData?.activities || [];
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">Coach Dashboard</h1>
        <Link to="/clients/new">
          <Button variant="primary" className="flex items-center">
            <PlusIcon className="mr-1 h-5 w-5" />
            Add Client
          </Button>
        </Link>
      </div>
      
      <StatsOverview stats={stats} />
      
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
        {/* Action Items */}
        <div className="lg:col-span-1">
          <Card title="Action Items">
            <ActionItems items={actionItems} />
          </Card>
        </div>
        
        {/* Recent Activity */}
        <div className="lg:col-span-2">
          <Card title="Recent Activity">
            <RecentActivities activities={activities} />
          </Card>
        </div>
      </div>
      
      <div>
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-900">Your Clients</h2>
          <Link to="/clients" className="text-sm text-primary-600 hover:text-primary-500">
            View all
          </Link>
        </div>
        
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {clients.slice(0, 8).map((client) => (
            <ClientSummary key={client.id} client={client} />
          ))}
          
          {clients.length === 0 && (
            <div className="col-span-full py-8 text-center">
              <h3 className="mt-2 text-sm font-semibold text-gray-900">No clients yet</h3>
              <p className="mt-1 text-sm text-gray-500">Get started by adding your first client.</p>
              <div className="mt-6">
                <Link to="/clients/new">
                  <Button variant="primary">Add Client</Button>
                </Link>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CoachDashboard;


____________


Now I've provided a comprehensive set of starting points for your fitness coaching app using bolt.new. Here's a summary of what you have:
Project Structure and Setup

Complete project structure with organized directories
Setup scripts for installing dependencies
Tailwind CSS configuration with custom theme

Core Architecture

React application with modern hooks and context
Routing setup with protected routes
Authentication system
API service structure

UI Components

Layout components for main app and authentication
Common UI components (Button, Card, FormField, etc.)
Dashboard components for both coach and client views
Navigation with Sidebar and Navbar

Data Management

Comprehensive mock data covering all aspects of the app
Mock API service for development
Hook for easy connection to mock or real API

Key Features Implemented

Authentication flow (login, register, password reset)
Dashboard views for coaches and clients
Client management structure
Workout tracking components
Nutrition planning system
Supplement management
Health monitoring

To get started with bolt.new:

Create a new project using these files
Run the setup scripts to install dependencies
Start with the main App component and routes
The mock data will allow you to develop the UI without needing a backend
Each component is modular and can be extended as needed

The app has been structured to follow best practices:

Component reusability
Separation of concerns
Proper state management
Clean API service layer
Comprehensive type safety
Evidence-based content in the knowledge base

This provides a solid foundation to build upon. You can focus on developing each feature module incrementally while maintaining a cohesive overall architecture.

